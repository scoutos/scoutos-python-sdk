# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawWorkflowLogsClient, RawWorkflowLogsClient
from .types.workflow_logs_list_logs_response import WorkflowLogsListLogsResponse


class WorkflowLogsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawWorkflowLogsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawWorkflowLogsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawWorkflowLogsClient
        """
        return self._raw_client

    def list_logs(
        self,
        *,
        workflow_id: str,
        start_date: typing.Optional[str] = None,
        end_date: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        session_id: typing.Optional[str] = None,
        status: typing.Optional[str] = None,
        cursor: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Iterator[WorkflowLogsListLogsResponse]:
        """
        Parameters
        ----------
        workflow_id : str

        start_date : typing.Optional[str]

        end_date : typing.Optional[str]

        limit : typing.Optional[int]

        session_id : typing.Optional[str]

        status : typing.Optional[str]

        cursor : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Yields
        ------
        typing.Iterator[WorkflowLogsListLogsResponse]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        response = client.workflow_logs.list_logs(
            workflow_id="workflow_id",
        )
        for chunk in response:
            yield chunk
        """
        with self._raw_client.list_logs(
            workflow_id=workflow_id,
            start_date=start_date,
            end_date=end_date,
            limit=limit,
            session_id=session_id,
            status=status,
            cursor=cursor,
            request_options=request_options,
        ) as r:
            yield from r.data


class AsyncWorkflowLogsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawWorkflowLogsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawWorkflowLogsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawWorkflowLogsClient
        """
        return self._raw_client

    async def list_logs(
        self,
        *,
        workflow_id: str,
        start_date: typing.Optional[str] = None,
        end_date: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        session_id: typing.Optional[str] = None,
        status: typing.Optional[str] = None,
        cursor: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.AsyncIterator[WorkflowLogsListLogsResponse]:
        """
        Parameters
        ----------
        workflow_id : str

        start_date : typing.Optional[str]

        end_date : typing.Optional[str]

        limit : typing.Optional[int]

        session_id : typing.Optional[str]

        status : typing.Optional[str]

        cursor : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Yields
        ------
        typing.AsyncIterator[WorkflowLogsListLogsResponse]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            response = await client.workflow_logs.list_logs(
                workflow_id="workflow_id",
            )
            async for chunk in response:
                yield chunk


        asyncio.run(main())
        """
        async with self._raw_client.list_logs(
            workflow_id=workflow_id,
            start_date=start_date,
            end_date=end_date,
            limit=limit,
            session_id=session_id,
            status=status,
            cursor=cursor,
            request_options=request_options,
        ) as r:
            async for _chunk in r.data:
                yield _chunk
