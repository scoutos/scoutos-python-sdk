# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.unchecked_base_model import construct_type
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.environment_deployment_config import EnvironmentDeploymentConfig
from ..types.http_validation_error import HttpValidationError
from ..types.src_handlers_get_workflow_environments_response import SrcHandlersGetWorkflowEnvironmentsResponse
from ..types.src_handlers_update_workflow_environment_response import SrcHandlersUpdateWorkflowEnvironmentResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawEnvironmentsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self, workflow_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[SrcHandlersGetWorkflowEnvironmentsResponse]:
        """
        List all environments for a workflow in the organization

        Parameters
        ----------
        workflow_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[SrcHandlersGetWorkflowEnvironmentsResponse]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/workflows/{jsonable_encoder(workflow_id)}/environments",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SrcHandlersGetWorkflowEnvironmentsResponse,
                    construct_type(
                        type_=SrcHandlersGetWorkflowEnvironmentsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def update(
        self,
        workflow_id: str,
        environment_id: str,
        *,
        name: str,
        description: str,
        deployments: typing.Sequence[EnvironmentDeploymentConfig],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[SrcHandlersUpdateWorkflowEnvironmentResponse]:
        """
        Update deployments within a workflow environment

        Parameters
        ----------
        workflow_id : str

        environment_id : str

        name : str

        description : str

        deployments : typing.Sequence[EnvironmentDeploymentConfig]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[SrcHandlersUpdateWorkflowEnvironmentResponse]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v2/workflows/{jsonable_encoder(workflow_id)}/environments/{jsonable_encoder(environment_id)}",
            method="PUT",
            json={
                "name": name,
                "description": description,
                "deployments": convert_and_respect_annotation_metadata(
                    object_=deployments, annotation=typing.Sequence[EnvironmentDeploymentConfig], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SrcHandlersUpdateWorkflowEnvironmentResponse,
                    construct_type(
                        type_=SrcHandlersUpdateWorkflowEnvironmentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawEnvironmentsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self, workflow_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[SrcHandlersGetWorkflowEnvironmentsResponse]:
        """
        List all environments for a workflow in the organization

        Parameters
        ----------
        workflow_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[SrcHandlersGetWorkflowEnvironmentsResponse]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/workflows/{jsonable_encoder(workflow_id)}/environments",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SrcHandlersGetWorkflowEnvironmentsResponse,
                    construct_type(
                        type_=SrcHandlersGetWorkflowEnvironmentsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def update(
        self,
        workflow_id: str,
        environment_id: str,
        *,
        name: str,
        description: str,
        deployments: typing.Sequence[EnvironmentDeploymentConfig],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[SrcHandlersUpdateWorkflowEnvironmentResponse]:
        """
        Update deployments within a workflow environment

        Parameters
        ----------
        workflow_id : str

        environment_id : str

        name : str

        description : str

        deployments : typing.Sequence[EnvironmentDeploymentConfig]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[SrcHandlersUpdateWorkflowEnvironmentResponse]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v2/workflows/{jsonable_encoder(workflow_id)}/environments/{jsonable_encoder(environment_id)}",
            method="PUT",
            json={
                "name": name,
                "description": description,
                "deployments": convert_and_respect_annotation_metadata(
                    object_=deployments, annotation=typing.Sequence[EnvironmentDeploymentConfig], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    SrcHandlersUpdateWorkflowEnvironmentResponse,
                    construct_type(
                        type_=SrcHandlersUpdateWorkflowEnvironmentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
