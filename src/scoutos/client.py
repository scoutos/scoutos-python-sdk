# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import os
import typing

import httpx
from . import core
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .core.request_options import RequestOptions
from .environment import ScoutEnvironment
from .raw_client import AsyncRawScout, RawScout
from .types.agent_revision import AgentRevision
from .types.cancel_response import CancelResponse
from .types.connect_integration_request_auth_type import ConnectIntegrationRequestAuthType
from .types.create_entity_request import CreateEntityRequest
from .types.create_hook_webhooks_post_request import CreateHookWebhooksPostRequest
from .types.create_hook_webhooks_post_response import CreateHookWebhooksPostResponse
from .types.create_integrations_response import CreateIntegrationsResponse
from .types.create_pulse_response import CreatePulseResponse
from .types.create_tag_response import CreateTagResponse
from .types.delete_hook_response import DeleteHookResponse
from .types.delete_response import DeleteResponse
from .types.entity_search_request_mode import EntitySearchRequestMode
from .types.entity_search_request_return_format import EntitySearchRequestReturnFormat
from .types.execute_tool_response import ExecuteToolResponse
from .types.favorite_ref import FavoriteRef
from .types.files_attribute import FilesAttribute
from .types.files_response import FilesResponse
from .types.fluent_query_request_with_item import FluentQueryRequestWithItem
from .types.get_hook_webhooks_hook_id_details_get_response import GetHookWebhooksHookIdDetailsGetResponse
from .types.hooks_list_response import HooksListResponse
from .types.integration_connection import IntegrationConnection
from .types.integration_with_connections import IntegrationWithConnections
from .types.list_tags_response import ListTagsResponse
from .types.list_tools_response import ListToolsResponse
from .types.mention import Mention
from .types.participant import Participant
from .types.plan_types import PlanTypes
from .types.pulse_feed_response import PulseFeedResponse
from .types.query_builder_request_group_by_item import QueryBuilderRequestGroupByItem
from .types.query_builder_request_sort_by import QueryBuilderRequestSortBy
from .types.query_builder_request_sort_direction import QueryBuilderRequestSortDirection
from .types.query_builder_request_tag_mode import QueryBuilderRequestTagMode
from .types.rename_response import RenameResponse
from .types.resource import Resource
from .types.result import Result
from .types.schedule import Schedule
from .types.schemas_response import SchemasResponse
from .types.scout_hook_config_http import ScoutHookConfigHttp
from .types.scout_hook_response import ScoutHookResponse
from .types.scout_hook_update_triggering_events_item import ScoutHookUpdateTriggeringEventsItem
from .types.scout_hooks_response import ScoutHooksResponse
from .types.search_request_search_type import SearchRequestSearchType
from .types.src_app_http_routes_billing_billing_hourly_response import SrcAppHttpRoutesBillingBillingHourlyResponse
from .types.src_app_http_routes_billing_change_billing_plan_response import (
    SrcAppHttpRoutesBillingChangeBillingPlanResponse,
)
from .types.src_app_http_routes_billing_create_portal_session_response import (
    SrcAppHttpRoutesBillingCreatePortalSessionResponse,
)
from .types.src_app_http_routes_billing_free_plan_usage_response import SrcAppHttpRoutesBillingFreePlanUsageResponse
from .types.src_app_http_routes_billing_get_billing_response import SrcAppHttpRoutesBillingGetBillingResponse
from .types.src_app_http_routes_billing_get_info_get_info_response import SrcAppHttpRoutesBillingGetInfoGetInfoResponse
from .types.src_app_http_routes_billing_get_invoices_response import SrcAppHttpRoutesBillingGetInvoicesResponse
from .types.src_app_http_routes_billing_get_notifications_response import (
    SrcAppHttpRoutesBillingGetNotificationsResponse,
)
from .types.src_app_http_routes_billing_renew_plans_response import SrcAppHttpRoutesBillingRenewPlansResponse
from .types.src_app_http_routes_collection_parse_file_response import SrcAppHttpRoutesCollectionParseFileResponse
from .types.src_app_http_routes_drive_create_drive_crawl_payload_source_sync_settings import (
    SrcAppHttpRoutesDriveCreateDriveCrawlPayloadSourceSyncSettings,
)
from .types.src_app_http_routes_inbox_handle_message_incoming_message import (
    SrcAppHttpRoutesInboxHandleMessageIncomingMessage,
)
from .types.src_app_http_routes_inbox_handle_message_interaction_request_participants_item import (
    SrcAppHttpRoutesInboxHandleMessageInteractionRequestParticipantsItem,
)
from .types.src_app_http_routes_onboarding_handle_get_me_response import SrcAppHttpRoutesOnboardingHandleGetMeResponse
from .types.src_app_http_routes_onboarding_handle_update_me_response import (
    SrcAppHttpRoutesOnboardingHandleUpdateMeResponse,
)
from .types.src_app_http_routes_root_get_info_response import SrcAppHttpRoutesRootGetInfoResponse
from .types.src_app_http_routes_world_interact_incoming_message import SrcAppHttpRoutesWorldInteractIncomingMessage
from .types.store_response import StoreResponse
from .types.tag import Tag
from .types.tags_response import TagsResponse
from .types.tool_details import ToolDetails
from .types.tools_response import ToolsResponse
from .types.update_tag_response import UpdateTagResponse

if typing.TYPE_CHECKING:
    from .collections.client import AsyncCollectionsClient, CollectionsClient
    from .copilots.client import AsyncCopilotsClient, CopilotsClient
    from .documents.client import AsyncDocumentsClient, DocumentsClient
    from .environments.client import AsyncEnvironmentsClient, EnvironmentsClient
    from .integrations.client import AsyncIntegrationsClient, IntegrationsClient
    from .organizations.client import AsyncOrganizationsClient, OrganizationsClient
    from .revisions.client import AsyncRevisionsClient, RevisionsClient
    from .sources.client import AsyncSourcesClient, SourcesClient
    from .syncs.client import AsyncSyncsClient, SyncsClient
    from .tables.client import AsyncTablesClient, TablesClient
    from .triggers.client import AsyncTriggersClient, TriggersClient
    from .usage.client import AsyncUsageClient, UsageClient
    from .workflow_logs.client import AsyncWorkflowLogsClient, WorkflowLogsClient
    from .workflows.client import AsyncWorkflowsClient, WorkflowsClient
# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class Scout:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : ScoutEnvironment
        The environment to use for requests from the client. from .environment import ScoutEnvironment



        Defaults to ScoutEnvironment.PROD



    api_key : typing.Optional[typing.Union[str, typing.Callable[[], str]]]
    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from scoutos import Scout

    client = Scout(
        api_key="YOUR_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: ScoutEnvironment = ScoutEnvironment.PROD,
        api_key: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = os.getenv("SCOUT_API_KEY"),
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            api_key=api_key,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._raw_client = RawScout(client_wrapper=self._client_wrapper)
        self._workflows: typing.Optional[WorkflowsClient] = None
        self._environments: typing.Optional[EnvironmentsClient] = None
        self._revisions: typing.Optional[RevisionsClient] = None
        self._usage: typing.Optional[UsageClient] = None
        self._workflow_logs: typing.Optional[WorkflowLogsClient] = None
        self._copilots: typing.Optional[CopilotsClient] = None
        self._triggers: typing.Optional[TriggersClient] = None
        self._integrations: typing.Optional[IntegrationsClient] = None
        self._organizations: typing.Optional[OrganizationsClient] = None
        self._collections: typing.Optional[CollectionsClient] = None
        self._tables: typing.Optional[TablesClient] = None
        self._documents: typing.Optional[DocumentsClient] = None
        self._sources: typing.Optional[SourcesClient] = None
        self._syncs: typing.Optional[SyncsClient] = None

    @property
    def with_raw_response(self) -> RawScout:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawScout
        """
        return self._raw_client

    def info_handler_info_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SrcAppHttpRoutesRootGetInfoResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SrcAppHttpRoutesRootGetInfoResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.info_handler_info_get()
        """
        _response = self._raw_client.info_handler_info_get(request_options=request_options)
        return _response.data

    def get_info_v_2_triggers_info_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_info_v_2_triggers_info_get()
        """
        _response = self._raw_client.get_info_v_2_triggers_info_get(request_options=request_options)
        return _response.data

    def get_info_v_2_index_info_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_info_v_2_index_info_get()
        """
        _response = self._raw_client.get_info_v_2_index_info_get(request_options=request_options)
        return _response.data

    def get_info_v_2_workflows_info_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_info_v_2_workflows_info_get()
        """
        _response = self._raw_client.get_info_v_2_workflows_info_get(request_options=request_options)
        return _response.data

    def get_info_v_2_collections_info_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_info_v_2_collections_info_get()
        """
        _response = self._raw_client.get_info_v_2_collections_info_get(request_options=request_options)
        return _response.data

    def parse_file_v_2_files_parse_post(
        self,
        *,
        file: core.File,
        return_text: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SrcAppHttpRoutesCollectionParseFileResponse:
        """
        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        return_text : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SrcAppHttpRoutesCollectionParseFileResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.parse_file_v_2_files_parse_post(
            return_text=True,
        )
        """
        _response = self._raw_client.parse_file_v_2_files_parse_post(
            file=file, return_text=return_text, request_options=request_options
        )
        return _response.data

    def get_integrations_integrations_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[IntegrationWithConnections]:
        """
        Get all integrations for an organization

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[IntegrationWithConnections]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_integrations_integrations_get()
        """
        _response = self._raw_client.get_integrations_integrations_get(request_options=request_options)
        return _response.data

    def get_integration_integrations_integration_id_get(
        self, integration_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> IntegrationWithConnections:
        """
        Get a specific integration for an organization by its ID.

        Parameters
        ----------
        integration_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        IntegrationWithConnections
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_integration_integrations_integration_id_get(
            integration_id="integration_id",
        )
        """
        _response = self._raw_client.get_integration_integrations_integration_id_get(
            integration_id, request_options=request_options
        )
        return _response.data

    def get_integration_connections_integrations_integration_id_connections_get(
        self, integration_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[IntegrationConnection]:
        """
        Get all integrations for an organization

        Parameters
        ----------
        integration_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[IntegrationConnection]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_integration_connections_integrations_integration_id_connections_get(
            integration_id="integration_id",
        )
        """
        _response = self._raw_client.get_integration_connections_integrations_integration_id_connections_get(
            integration_id, request_options=request_options
        )
        return _response.data

    def connect_integration_integrations_integration_id_connect_post(
        self,
        integration_id: str,
        *,
        auth_type: ConnectIntegrationRequestAuthType,
        api_key: typing.Optional[str] = OMIT,
        code: typing.Optional[str] = OMIT,
        state: typing.Optional[str] = OMIT,
        scope: typing.Optional[str] = OMIT,
        client_id: typing.Optional[str] = OMIT,
        client_secret: typing.Optional[str] = OMIT,
        environment: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateIntegrationsResponse:
        """
        Parameters
        ----------
        integration_id : str

        auth_type : ConnectIntegrationRequestAuthType

        api_key : typing.Optional[str]

        code : typing.Optional[str]

        state : typing.Optional[str]

        scope : typing.Optional[str]

        client_id : typing.Optional[str]

        client_secret : typing.Optional[str]

        environment : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateIntegrationsResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.connect_integration_integrations_integration_id_connect_post(
            integration_id="integration_id",
            auth_type="api_key",
        )
        """
        _response = self._raw_client.connect_integration_integrations_integration_id_connect_post(
            integration_id,
            auth_type=auth_type,
            api_key=api_key,
            code=code,
            state=state,
            scope=scope,
            client_id=client_id,
            client_secret=client_secret,
            environment=environment,
            request_options=request_options,
        )
        return _response.data

    def handle_send_message_integrations_slack_send_post(
        self,
        *,
        channel_id: str,
        text: str,
        thread_id: typing.Optional[str] = OMIT,
        blocks: typing.Optional[typing.Sequence[typing.Dict[str, typing.Optional[typing.Any]]]] = OMIT,
        username: typing.Optional[str] = OMIT,
        icon_url: typing.Optional[str] = OMIT,
        integration_id: typing.Optional[str] = OMIT,
        unfurl_links: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Dict[str, typing.Optional[typing.Any]]:
        """
        Parameters
        ----------
        channel_id : str

        text : str

        thread_id : typing.Optional[str]

        blocks : typing.Optional[typing.Sequence[typing.Dict[str, typing.Optional[typing.Any]]]]

        username : typing.Optional[str]

        icon_url : typing.Optional[str]

        integration_id : typing.Optional[str]

        unfurl_links : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[typing.Any]]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.handle_send_message_integrations_slack_send_post(
            channel_id="channel_id",
            text="text",
        )
        """
        _response = self._raw_client.handle_send_message_integrations_slack_send_post(
            channel_id=channel_id,
            text=text,
            thread_id=thread_id,
            blocks=blocks,
            username=username,
            icon_url=icon_url,
            integration_id=integration_id,
            unfurl_links=unfurl_links,
            request_options=request_options,
        )
        return _response.data

    def handle_add_reaction_integrations_slack_react_post(
        self,
        *,
        channel_id: str,
        emoji_name: str,
        thread_id: typing.Optional[str] = OMIT,
        integration_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Dict[str, typing.Optional[typing.Any]]:
        """
        Parameters
        ----------
        channel_id : str

        emoji_name : str

        thread_id : typing.Optional[str]

        integration_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[typing.Any]]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.handle_add_reaction_integrations_slack_react_post(
            channel_id="channel_id",
            emoji_name="emoji_name",
        )
        """
        _response = self._raw_client.handle_add_reaction_integrations_slack_react_post(
            channel_id=channel_id,
            emoji_name=emoji_name,
            thread_id=thread_id,
            integration_id=integration_id,
            request_options=request_options,
        )
        return _response.data

    def handle_get_thread_integrations_slack_thread_get(
        self,
        *,
        channel_id: str,
        thread_id: str,
        integration_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Dict[str, typing.Optional[typing.Any]]:
        """
        Parameters
        ----------
        channel_id : str

        thread_id : str

        integration_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[typing.Any]]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.handle_get_thread_integrations_slack_thread_get(
            channel_id="channel_id",
            thread_id="thread_id",
            integration_id="integration_id",
        )
        """
        _response = self._raw_client.handle_get_thread_integrations_slack_thread_get(
            channel_id=channel_id, thread_id=thread_id, integration_id=integration_id, request_options=request_options
        )
        return _response.data

    def handle_get_team_info_integrations_slack_team_get(
        self, *, team_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Dict[str, typing.Optional[typing.Any]]:
        """
        Handles the request to get Slack team info

        Parameters
        ----------
        team_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[typing.Any]]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.handle_get_team_info_integrations_slack_team_get(
            team_id="team_id",
        )
        """
        _response = self._raw_client.handle_get_team_info_integrations_slack_team_get(
            team_id=team_id, request_options=request_options
        )
        return _response.data

    def handle_list_channels_integrations_slack_channels_get(
        self,
        *,
        team_id: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Dict[str, typing.Optional[typing.Any]]:
        """
        Parameters
        ----------
        team_id : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[typing.Any]]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.handle_list_channels_integrations_slack_channels_get()
        """
        _response = self._raw_client.handle_list_channels_integrations_slack_channels_get(
            team_id=team_id, request_options=request_options
        )
        return _response.data

    def handle_migrate_integrations_integrations_migrate_post(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Dict[str, typing.Optional[typing.Any]]:
        """
        Migrate integration tokens from Neon to Firestore with KMS encryption.

        This endpoint accepts a list of organization IDs and migrates their Slack and Notion tokens.
        It fetches tokens from the Neon database and stores them in Firestore,
        encrypting the tokens using KMS.

        NOTE: Not a public endpoint - used for internal database migration

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[typing.Any]]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.handle_migrate_integrations_integrations_migrate_post()
        """
        _response = self._raw_client.handle_migrate_integrations_integrations_migrate_post(
            request_options=request_options
        )
        return _response.data

    def handle_notion_oauth_integrations_notion_oauth_post(
        self,
        *,
        access_token: str,
        metadata: typing.Dict[str, typing.Optional[typing.Any]],
        integrated_service_id: typing.Optional[str] = OMIT,
        code: typing.Optional[str] = OMIT,
        redirect_uri: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Handle Notion OAuth token upsert

        Args:
            request: The FastAPI request object
            body: The request body containing the access token and metadata

        Returns:
            Response indicating success

        Raises:
            HTTPException: If there's an error during the process

        Parameters
        ----------
        access_token : str

        metadata : typing.Dict[str, typing.Optional[typing.Any]]

        integrated_service_id : typing.Optional[str]

        code : typing.Optional[str]

        redirect_uri : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.handle_notion_oauth_integrations_notion_oauth_post(
            access_token="access_token",
            metadata={"key": "value"},
        )
        """
        _response = self._raw_client.handle_notion_oauth_integrations_notion_oauth_post(
            access_token=access_token,
            metadata=metadata,
            integrated_service_id=integrated_service_id,
            code=code,
            redirect_uri=redirect_uri,
            request_options=request_options,
        )
        return _response.data

    def exchange_mcp_auth_mcp_authorization_post(
        self,
        *,
        code: str,
        state: str,
        url: str,
        name: str,
        integration_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        code : str

        state : str

        url : str

        name : str

        integration_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.exchange_mcp_auth_mcp_authorization_post(
            code="code",
            state="state",
            url="url",
            name="name",
            integration_id="integration_id",
        )
        """
        _response = self._raw_client.exchange_mcp_auth_mcp_authorization_post(
            code=code, state=state, url=url, name=name, integration_id=integration_id, request_options=request_options
        )
        return _response.data

    def connect_mcp_mcp_connect_post(
        self,
        *,
        url: str,
        name: str,
        integration_id: str,
        headers: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        url : str

        name : str

        integration_id : str

        headers : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.connect_mcp_mcp_connect_post(
            url="url",
            name="name",
            integration_id="integration_id",
        )
        """
        _response = self._raw_client.connect_mcp_mcp_connect_post(
            url=url, name=name, integration_id=integration_id, headers=headers, request_options=request_options
        )
        return _response.data

    def delete_mcp_connection_mcp_servers_connection_id_delete(
        self, connection_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        connection_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.delete_mcp_connection_mcp_servers_connection_id_delete(
            connection_id="connection_id",
        )
        """
        _response = self._raw_client.delete_mcp_connection_mcp_servers_connection_id_delete(
            connection_id, request_options=request_options
        )
        return _response.data

    def get_mcp_servers_mcp_servers_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_mcp_servers_mcp_servers_get()
        """
        _response = self._raw_client.get_mcp_servers_mcp_servers_get(request_options=request_options)
        return _response.data

    def get_info_inbox_info_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_info_inbox_info_get()
        """
        _response = self._raw_client.get_info_inbox_info_get(request_options=request_options)
        return _response.data

    def handle_get_sessions_inbox_sessions_get(
        self, *, search: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Process an interaction request through the environment.

        Args:
            request: The FastAPI request
            session_id: The ID of the session
            interaction_request: The interaction request data

        Returns:
            Span with the results of the interaction attached to its attributes

        Parameters
        ----------
        search : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.handle_get_sessions_inbox_sessions_get(
            search="search",
        )
        """
        _response = self._raw_client.handle_get_sessions_inbox_sessions_get(
            search=search, request_options=request_options
        )
        return _response.data

    def handle_get_notifications_inbox_notifications_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Process an interaction request through the environment.

        Args:
            request: The FastAPI request
            session_id: The ID of the session
            interaction_request: The interaction request data

        Returns:
            Span with the results of the interaction attached to its attributes

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.handle_get_notifications_inbox_notifications_get()
        """
        _response = self._raw_client.handle_get_notifications_inbox_notifications_get(request_options=request_options)
        return _response.data

    def handle_get_session_by_id_inbox_session_id_get(
        self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        session_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.handle_get_session_by_id_inbox_session_id_get(
            session_id="session_id",
        )
        """
        _response = self._raw_client.handle_get_session_by_id_inbox_session_id_get(
            session_id, request_options=request_options
        )
        return _response.data

    def handle_delete_session_inbox_session_id_delete(
        self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteResponse:
        """
        Delete an inbox session and all its associated messages.

        Args:
            request: The FastAPI request
            session_id: The ID of the session to delete

        Returns:
            DeleteResponse with deletion status

        Parameters
        ----------
        session_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.handle_delete_session_inbox_session_id_delete(
            session_id="session_id",
        )
        """
        _response = self._raw_client.handle_delete_session_inbox_session_id_delete(
            session_id, request_options=request_options
        )
        return _response.data

    def handle_transcribe_inbox_session_id_transcribe_post(
        self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        session_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.handle_transcribe_inbox_session_id_transcribe_post(
            session_id="session_id",
        )
        """
        _response = self._raw_client.handle_transcribe_inbox_session_id_transcribe_post(
            session_id, request_options=request_options
        )
        return _response.data

    def upload_private_files_inbox_session_id_files_post(
        self, session_id: str, *, files: typing.List[core.File], request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[FilesResponse]:
        """
        Parameters
        ----------
        session_id : str

        files : typing.List[core.File]
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[FilesResponse]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.upload_private_files_inbox_session_id_files_post(
            session_id="session_id",
        )
        """
        _response = self._raw_client.upload_private_files_inbox_session_id_files_post(
            session_id, files=files, request_options=request_options
        )
        return _response.data

    def handle_get_session_messages_inbox_session_id_messages_get(
        self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Process an interaction request through the environment.

        Args:
            request: The FastAPI request
            session_id: The ID of the session
            interaction_request: The interaction request data

        Returns:
            Span with the results of the interaction attached to its attributes

        Parameters
        ----------
        session_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.handle_get_session_messages_inbox_session_id_messages_get(
            session_id="session_id",
        )
        """
        _response = self._raw_client.handle_get_session_messages_inbox_session_id_messages_get(
            session_id, request_options=request_options
        )
        return _response.data

    def handle_message_inbox_session_id_messages_post(
        self,
        session_id: str,
        *,
        messages: typing.Sequence[SrcAppHttpRoutesInboxHandleMessageIncomingMessage],
        participants: typing.Sequence[SrcAppHttpRoutesInboxHandleMessageInteractionRequestParticipantsItem],
        history: typing.Optional[typing.Sequence[SrcAppHttpRoutesInboxHandleMessageIncomingMessage]] = OMIT,
        files: typing.Optional[typing.Sequence[FilesAttribute]] = OMIT,
        mentions: typing.Optional[typing.Sequence[Mention]] = OMIT,
        ephemeral_agent_revision: typing.Optional[AgentRevision] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Process an interaction request through the environment.

        Args:
            request: The FastAPI request
            session_id: The ID of the session
            interaction_request: The interaction request data

        Returns:
            Span with the results of the interaction attached to its attributes

        Parameters
        ----------
        session_id : str

        messages : typing.Sequence[SrcAppHttpRoutesInboxHandleMessageIncomingMessage]

        participants : typing.Sequence[SrcAppHttpRoutesInboxHandleMessageInteractionRequestParticipantsItem]

        history : typing.Optional[typing.Sequence[SrcAppHttpRoutesInboxHandleMessageIncomingMessage]]

        files : typing.Optional[typing.Sequence[FilesAttribute]]

        mentions : typing.Optional[typing.Sequence[Mention]]

        ephemeral_agent_revision : typing.Optional[AgentRevision]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import (
            Scout,
            ScoutUser,
            SrcAppHttpRoutesInboxHandleMessageIncomingMessage,
        )

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.handle_message_inbox_session_id_messages_post(
            session_id="session_id",
            messages=[
                SrcAppHttpRoutesInboxHandleMessageIncomingMessage(
                    content="content",
                    content_type="text/plain",
                )
            ],
            participants=[
                ScoutUser(
                    id="id",
                )
            ],
        )
        """
        _response = self._raw_client.handle_message_inbox_session_id_messages_post(
            session_id,
            messages=messages,
            participants=participants,
            history=history,
            files=files,
            mentions=mentions,
            ephemeral_agent_revision=ephemeral_agent_revision,
            request_options=request_options,
        )
        return _response.data

    def handle_post_session_participant_inbox_sessions_session_id_participants_post(
        self,
        session_id: str,
        *,
        request: typing.Sequence[Participant],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Process an interaction request through the environment.

        Args:
            request: The FastAPI request
            session_id: The ID of the session
            interaction_request: The interaction request data

        Returns:
            Span with the results of the interaction attached to its attributes

        Parameters
        ----------
        session_id : str

        request : typing.Sequence[Participant]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Participant, Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.handle_post_session_participant_inbox_sessions_session_id_participants_post(
            session_id="session_id",
            request=[
                Participant(
                    id="id",
                    type="scout_user",
                )
            ],
        )
        """
        _response = self._raw_client.handle_post_session_participant_inbox_sessions_session_id_participants_post(
            session_id, request=request, request_options=request_options
        )
        return _response.data

    def handle_cancel_session_inbox_session_id_cancel_post(
        self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CancelResponse:
        """
        Cancel ongoing agent response for a session.

        Args:
            request: The FastAPI request
            session_id: The ID of the session to cancel

        Returns:
            CancelResponse with cancellation status

        Parameters
        ----------
        session_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CancelResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.handle_cancel_session_inbox_session_id_cancel_post(
            session_id="session_id",
        )
        """
        _response = self._raw_client.handle_cancel_session_inbox_session_id_cancel_post(
            session_id, request_options=request_options
        )
        return _response.data

    def handle_rename_session_inbox_session_id_rename_post(
        self, session_id: str, *, title: str, request_options: typing.Optional[RequestOptions] = None
    ) -> RenameResponse:
        """
        Rename an inbox session by updating its title.

        Args:
            request: The FastAPI request
            session_id: The ID of the session to rename
            rename_request: The request containing the new title

        Returns:
            RenameResponse with rename status and new title

        Parameters
        ----------
        session_id : str

        title : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RenameResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.handle_rename_session_inbox_session_id_rename_post(
            session_id="session_id",
            title="title",
        )
        """
        _response = self._raw_client.handle_rename_session_inbox_session_id_rename_post(
            session_id, title=title, request_options=request_options
        )
        return _response.data

    def execute_hook_webhooks_hook_id_get(
        self, hook_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Execute a hook trigger.

        This is the main endpoint that external services call to trigger hooks.

        Parameters
        ----------
        hook_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.execute_hook_webhooks_hook_id_get(
            hook_id="hook_id",
        )
        """
        _response = self._raw_client.execute_hook_webhooks_hook_id_get(hook_id, request_options=request_options)
        return _response.data

    def execute_hook_webhooks_hook_id_post(
        self, hook_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Execute a hook trigger.

        This is the main endpoint that external services call to trigger hooks.

        Parameters
        ----------
        hook_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.execute_hook_webhooks_hook_id_post(
            hook_id="hook_id",
        )
        """
        _response = self._raw_client.execute_hook_webhooks_hook_id_post(hook_id, request_options=request_options)
        return _response.data

    def delete_hook_webhooks_hook_id_delete(
        self, hook_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteHookResponse:
        """
        Soft delete a hook.

        Parameters
        ----------
        hook_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteHookResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.delete_hook_webhooks_hook_id_delete(
            hook_id="hook_id",
        )
        """
        _response = self._raw_client.delete_hook_webhooks_hook_id_delete(hook_id, request_options=request_options)
        return _response.data

    def update_hook_webhooks_hook_id_patch(
        self,
        hook_id: str,
        *,
        name: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        status: typing.Optional[str] = OMIT,
        target_config: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        response_mode: typing.Optional[str] = OMIT,
        allowed_methods: typing.Optional[typing.Sequence[str]] = OMIT,
        max_payload_size: typing.Optional[int] = OMIT,
        secret: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Update a hook's configuration.

        Parameters
        ----------
        hook_id : str

        name : typing.Optional[str]

        description : typing.Optional[str]

        status : typing.Optional[str]

        target_config : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        response_mode : typing.Optional[str]

        allowed_methods : typing.Optional[typing.Sequence[str]]

        max_payload_size : typing.Optional[int]

        secret : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.update_hook_webhooks_hook_id_patch(
            hook_id="hook_id",
        )
        """
        _response = self._raw_client.update_hook_webhooks_hook_id_patch(
            hook_id,
            name=name,
            description=description,
            status=status,
            target_config=target_config,
            response_mode=response_mode,
            allowed_methods=allowed_methods,
            max_payload_size=max_payload_size,
            secret=secret,
            request_options=request_options,
        )
        return _response.data

    def list_hooks_webhooks_get(
        self,
        *,
        target_type: typing.Optional[str] = None,
        target_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HooksListResponse:
        """
        List all hooks for the current organization.

        Parameters
        ----------
        target_type : typing.Optional[str]

        target_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HooksListResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.list_hooks_webhooks_get(
            target_type="target_type",
            target_id="target_id",
        )
        """
        _response = self._raw_client.list_hooks_webhooks_get(
            target_type=target_type, target_id=target_id, request_options=request_options
        )
        return _response.data

    def create_hook_webhooks_post(
        self, *, request: CreateHookWebhooksPostRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> CreateHookWebhooksPostResponse:
        """
        Create a new hook for a workflow or other target.

        Parameters
        ----------
        request : CreateHookWebhooksPostRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateHookWebhooksPostResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout, WorkflowHookInput

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.create_hook_webhooks_post(
            request=WorkflowHookInput(
                name="name",
                target_id="target_id",
            ),
        )
        """
        _response = self._raw_client.create_hook_webhooks_post(request=request, request_options=request_options)
        return _response.data

    def get_hook_webhooks_hook_id_details_get(
        self, hook_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetHookWebhooksHookIdDetailsGetResponse:
        """
        Get a hook by its ID.

        Parameters
        ----------
        hook_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetHookWebhooksHookIdDetailsGetResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_hook_webhooks_hook_id_details_get(
            hook_id="hook_id",
        )
        """
        _response = self._raw_client.get_hook_webhooks_hook_id_details_get(hook_id, request_options=request_options)
        return _response.data

    def get_info_money_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SrcAppHttpRoutesBillingGetInfoGetInfoResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SrcAppHttpRoutesBillingGetInfoGetInfoResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_info_money_get()
        """
        _response = self._raw_client.get_info_money_get(request_options=request_options)
        return _response.data

    def get_billing_accounts_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SrcAppHttpRoutesBillingGetBillingResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SrcAppHttpRoutesBillingGetBillingResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_billing_accounts_get()
        """
        _response = self._raw_client.get_billing_accounts_get(request_options=request_options)
        return _response.data

    def get_usage_accounts_usage_get(
        self,
        *,
        start_date: typing.Optional[str] = None,
        end_date: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Result:
        """
        Parameters
        ----------
        start_date : typing.Optional[str]

        end_date : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Result
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_usage_accounts_usage_get(
            start_date="start_date",
            end_date="end_date",
        )
        """
        _response = self._raw_client.get_usage_accounts_usage_get(
            start_date=start_date, end_date=end_date, request_options=request_options
        )
        return _response.data

    def get_invoices_accounts_invoices_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SrcAppHttpRoutesBillingGetInvoicesResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SrcAppHttpRoutesBillingGetInvoicesResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_invoices_accounts_invoices_get()
        """
        _response = self._raw_client.get_invoices_accounts_invoices_get(request_options=request_options)
        return _response.data

    def create_portal_session_accounts_portal_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SrcAppHttpRoutesBillingCreatePortalSessionResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SrcAppHttpRoutesBillingCreatePortalSessionResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.create_portal_session_accounts_portal_get()
        """
        _response = self._raw_client.create_portal_session_accounts_portal_get(request_options=request_options)
        return _response.data

    def get_workflow_usage_accounts_usage_workflows_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Dict[str, typing.Optional[typing.Any]]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[typing.Any]]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_workflow_usage_accounts_usage_workflows_get()
        """
        _response = self._raw_client.get_workflow_usage_accounts_usage_workflows_get(request_options=request_options)
        return _response.data

    def get_notifications_notifications_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SrcAppHttpRoutesBillingGetNotificationsResponse:
        """
        This endpoint will pull any org facing notifications for the app to display
        Mostly billing related so far

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SrcAppHttpRoutesBillingGetNotificationsResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_notifications_notifications_get()
        """
        _response = self._raw_client.get_notifications_notifications_get(request_options=request_options)
        return _response.data

    def change_billing_plan_accounts_plan_put(
        self, *, name: PlanTypes, request_options: typing.Optional[RequestOptions] = None
    ) -> SrcAppHttpRoutesBillingChangeBillingPlanResponse:
        """
        Parameters
        ----------
        name : PlanTypes

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SrcAppHttpRoutesBillingChangeBillingPlanResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.change_billing_plan_accounts_plan_put(
            name="plan_1",
        )
        """
        _response = self._raw_client.change_billing_plan_accounts_plan_put(name=name, request_options=request_options)
        return _response.data

    def stripe_webhook_hooks_stripe_post(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.stripe_webhook_hooks_stripe_post()
        """
        _response = self._raw_client.stripe_webhook_hooks_stripe_post(request_options=request_options)
        return _response.data

    def renew_plans_crons_renew_plans_post(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SrcAppHttpRoutesBillingRenewPlansResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SrcAppHttpRoutesBillingRenewPlansResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.renew_plans_crons_renew_plans_post()
        """
        _response = self._raw_client.renew_plans_crons_renew_plans_post(request_options=request_options)
        return _response.data

    def daily_billing_tasks_crons_free_plan_usage_post(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SrcAppHttpRoutesBillingFreePlanUsageResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SrcAppHttpRoutesBillingFreePlanUsageResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.daily_billing_tasks_crons_free_plan_usage_post()
        """
        _response = self._raw_client.daily_billing_tasks_crons_free_plan_usage_post(request_options=request_options)
        return _response.data

    def billing_hourly_crons_billing_hourly_post(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SrcAppHttpRoutesBillingBillingHourlyResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SrcAppHttpRoutesBillingBillingHourlyResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.billing_hourly_crons_billing_hourly_post()
        """
        _response = self._raw_client.billing_hourly_crons_billing_hourly_post(request_options=request_options)
        return _response.data

    def list_spans_traces_trace_id_spans_get(
        self, trace_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        trace_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.list_spans_traces_trace_id_spans_get(
            trace_id="trace_id",
        )
        """
        _response = self._raw_client.list_spans_traces_trace_id_spans_get(trace_id, request_options=request_options)
        return _response.data

    def list_agent_sessions_observability_agents_agent_id_sessions_get(
        self,
        agent_id: str,
        *,
        start_date: typing.Optional[dt.datetime] = None,
        end_date: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        List agent sessions for a given agent and date range.

        Args:
            request: The FastAPI request
            agent_id: The ID of the agent
            start_date: Optional start date for filtering
            end_date: Optional end date for filtering

        Returns:
            Response with list of agent sessions

        Parameters
        ----------
        agent_id : str

        start_date : typing.Optional[dt.datetime]

        end_date : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import datetime

        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.list_agent_sessions_observability_agents_agent_id_sessions_get(
            agent_id="agent_id",
            start_date=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            end_date=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
        )
        """
        _response = self._raw_client.list_agent_sessions_observability_agents_agent_id_sessions_get(
            agent_id, start_date=start_date, end_date=end_date, request_options=request_options
        )
        return _response.data

    def list_agent_sessions_summary_observability_agents_agent_id_sessions_summary_get(
        self,
        agent_id: str,
        *,
        start_date: typing.Optional[str] = None,
        end_date: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        cursor: typing.Optional[str] = None,
        tool_filter: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        agent_id : str

        start_date : typing.Optional[str]
            Start date in ISO format

        end_date : typing.Optional[str]
            End date in ISO format

        limit : typing.Optional[int]
            Number of sessions per page

        cursor : typing.Optional[str]
            Pagination cursor

        tool_filter : typing.Optional[str]
            Filter sessions by tool name

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.list_agent_sessions_summary_observability_agents_agent_id_sessions_summary_get(
            agent_id="agent_id",
            start_date="start_date",
            end_date="end_date",
            limit=1,
            cursor="cursor",
            tool_filter="tool_filter",
        )
        """
        _response = self._raw_client.list_agent_sessions_summary_observability_agents_agent_id_sessions_summary_get(
            agent_id,
            start_date=start_date,
            end_date=end_date,
            limit=limit,
            cursor=cursor,
            tool_filter=tool_filter,
            request_options=request_options,
        )
        return _response.data

    def get_session_details_observability_agents_agent_id_sessions_session_id_details_get(
        self, agent_id: str, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Get full session details including all traces and spans for a specific session.

        This endpoint is used when a user expands a session in the UI.

        Parameters
        ----------
        agent_id : str

        session_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_session_details_observability_agents_agent_id_sessions_session_id_details_get(
            agent_id="agent_id",
            session_id="session_id",
        )
        """
        _response = self._raw_client.get_session_details_observability_agents_agent_id_sessions_session_id_details_get(
            agent_id, session_id, request_options=request_options
        )
        return _response.data

    def get_agent_session_analytics_observability_agents_agent_id_analytics_get(
        self,
        agent_id: str,
        *,
        start_date: typing.Optional[dt.datetime] = None,
        end_date: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Get session analytics data for a specific agent from spans table (hypertable).

        Parameters
        ----------
        agent_id : str

        start_date : typing.Optional[dt.datetime]

        end_date : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import datetime

        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_agent_session_analytics_observability_agents_agent_id_analytics_get(
            agent_id="agent_id",
            start_date=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
            end_date=datetime.datetime.fromisoformat(
                "2024-01-15 09:30:00+00:00",
            ),
        )
        """
        _response = self._raw_client.get_agent_session_analytics_observability_agents_agent_id_analytics_get(
            agent_id, start_date=start_date, end_date=end_date, request_options=request_options
        )
        return _response.data

    def get_agent_tool_usage_observability_agents_agent_id_tool_usage_get(
        self,
        agent_id: str,
        *,
        start_date: typing.Optional[str] = None,
        end_date: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Get tool usage statistics for a specific agent.

        This endpoint aggregates tool invocations from spans data to show
        which tools are most frequently used by an agent.

        Parameters
        ----------
        agent_id : str

        start_date : typing.Optional[str]
            Start date in ISO format

        end_date : typing.Optional[str]
            End date in ISO format

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_agent_tool_usage_observability_agents_agent_id_tool_usage_get(
            agent_id="agent_id",
            start_date="start_date",
            end_date="end_date",
        )
        """
        _response = self._raw_client.get_agent_tool_usage_observability_agents_agent_id_tool_usage_get(
            agent_id, start_date=start_date, end_date=end_date, request_options=request_options
        )
        return _response.data

    def get_agent_distinct_tools_observability_agents_agent_id_tools_get(
        self,
        agent_id: str,
        *,
        start_date: typing.Optional[str] = None,
        end_date: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Get distinct tools used by an agent.

        This endpoint returns a clean list of all tools the agent has used
        in the specified date range, with usage counts.

        Parameters
        ----------
        agent_id : str

        start_date : typing.Optional[str]
            Start date in ISO format

        end_date : typing.Optional[str]
            End date in ISO format

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_agent_distinct_tools_observability_agents_agent_id_tools_get(
            agent_id="agent_id",
            start_date="start_date",
            end_date="end_date",
        )
        """
        _response = self._raw_client.get_agent_distinct_tools_observability_agents_agent_id_tools_get(
            agent_id, start_date=start_date, end_date=end_date, request_options=request_options
        )
        return _response.data

    def get_pulse_feed_pulse_feed_get(
        self,
        *,
        user_id: typing.Optional[str] = None,
        agent_ids: typing.Optional[str] = None,
        action_types: typing.Optional[str] = None,
        start_date: typing.Optional[str] = None,
        end_date: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        include_children: typing.Optional[bool] = None,
        min_significance: typing.Optional[float] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PulseFeedResponse:
        """
        Get pulse feed with enhanced filtering.

        Returns both new pulse events and legacy agent interactions.

        Parameters
        ----------
        user_id : typing.Optional[str]

        agent_ids : typing.Optional[str]

        action_types : typing.Optional[str]

        start_date : typing.Optional[str]

        end_date : typing.Optional[str]

        limit : typing.Optional[int]

        include_children : typing.Optional[bool]

        min_significance : typing.Optional[float]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PulseFeedResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_pulse_feed_pulse_feed_get(
            user_id="user_id",
            agent_ids="agent_ids",
            action_types="action_types",
            start_date="start_date",
            end_date="end_date",
            limit=1,
            include_children=True,
            min_significance=1.1,
        )
        """
        _response = self._raw_client.get_pulse_feed_pulse_feed_get(
            user_id=user_id,
            agent_ids=agent_ids,
            action_types=action_types,
            start_date=start_date,
            end_date=end_date,
            limit=limit,
            include_children=include_children,
            min_significance=min_significance,
            request_options=request_options,
        )
        return _response.data

    def create_pulse_json_pulse_post(
        self,
        *,
        description: str,
        agents: typing.Sequence[typing.Dict[str, typing.Optional[typing.Any]]],
        action: typing.Optional[str] = OMIT,
        objects: typing.Optional[typing.Sequence[typing.Dict[str, typing.Optional[typing.Any]]]] = OMIT,
        context: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        tags: typing.Optional[typing.Sequence[str]] = OMIT,
        visibility: typing.Optional[str] = OMIT,
        duration_minutes: typing.Optional[float] = OMIT,
        content: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        text: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreatePulseResponse:
        """
        Create pulse from JSON data (existing endpoint)

        Parameters
        ----------
        description : str

        agents : typing.Sequence[typing.Dict[str, typing.Optional[typing.Any]]]

        action : typing.Optional[str]

        objects : typing.Optional[typing.Sequence[typing.Dict[str, typing.Optional[typing.Any]]]]

        context : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        tags : typing.Optional[typing.Sequence[str]]

        visibility : typing.Optional[str]

        duration_minutes : typing.Optional[float]

        content : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        text : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreatePulseResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.create_pulse_json_pulse_post(
            description="description",
            agents=[{"key": "value"}],
        )
        """
        _response = self._raw_client.create_pulse_json_pulse_post(
            description=description,
            agents=agents,
            action=action,
            objects=objects,
            context=context,
            tags=tags,
            visibility=visibility,
            duration_minutes=duration_minutes,
            content=content,
            text=text,
            request_options=request_options,
        )
        return _response.data

    def get_entity_activities_pulse_activities_get(
        self,
        *,
        entity_id: typing.Optional[str] = None,
        entity_type: typing.Optional[str] = None,
        involving_agent: typing.Optional[str] = None,
        on_object: typing.Optional[str] = None,
        of_type: typing.Optional[str] = None,
        with_outcome: typing.Optional[str] = None,
        since_days: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Get activities - either for a specific entity or with general filters

        Parameters
        ----------
        entity_id : typing.Optional[str]
            ID of the entity

        entity_type : typing.Optional[str]
            Type of entity (account, deal, user, etc)

        involving_agent : typing.Optional[str]

        on_object : typing.Optional[str]

        of_type : typing.Optional[str]

        with_outcome : typing.Optional[str]

        since_days : typing.Optional[int]

        limit : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_entity_activities_pulse_activities_get(
            entity_id="entity_id",
            entity_type="entity_type",
            involving_agent="involving_agent",
            on_object="on_object",
            of_type="of_type",
            with_outcome="with_outcome",
            since_days=1,
            limit=1,
        )
        """
        _response = self._raw_client.get_entity_activities_pulse_activities_get(
            entity_id=entity_id,
            entity_type=entity_type,
            involving_agent=involving_agent,
            on_object=on_object,
            of_type=of_type,
            with_outcome=with_outcome,
            since_days=since_days,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    def store_create_pulse_store_create_post(
        self,
        *,
        type: str,
        data: typing.Dict[str, typing.Optional[typing.Any]],
        tags: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StoreResponse:
        """
        Create a new entity.

        Example:
            POST /pulse/store/create
            {
                "type": "todo",
                "data": {
                    "title": "Buy milk",
                    "completed": false
                }
            }

        Parameters
        ----------
        type : str
            Entity type (e.g., 'todo', 'note', 'task')

        data : typing.Dict[str, typing.Optional[typing.Any]]
            Entity data

        tags : typing.Optional[typing.Sequence[str]]
            Optional tags

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StoreResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.store_create_pulse_store_create_post(
            type="type",
            data={"key": "value"},
        )
        """
        _response = self._raw_client.store_create_pulse_store_create_post(
            type=type, data=data, tags=tags, request_options=request_options
        )
        return _response.data

    def store_update_pulse_store_update_post(
        self,
        *,
        id: str,
        updates: typing.Dict[str, typing.Optional[typing.Any]],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StoreResponse:
        """
        Update an entity (partial updates).

        Example:
            POST /pulse/store/update
            {
                "id": "todo_abc123",
                "updates": {
                    "completed": true,
                    "completed_at": "2024-01-01T12:00:00Z"
                }
            }

        Parameters
        ----------
        id : str
            Entity ID

        updates : typing.Dict[str, typing.Optional[typing.Any]]
            Partial updates to apply

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StoreResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.store_update_pulse_store_update_post(
            id="id",
            updates={"key": "value"},
        )
        """
        _response = self._raw_client.store_update_pulse_store_update_post(
            id=id, updates=updates, request_options=request_options
        )
        return _response.data

    def store_get_tags_pulse_store_tags_get(
        self,
        *,
        type: typing.Optional[str] = None,
        prefix: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TagsResponse:
        """
        Get all unique tags across entities.

        Example:
            GET /pulse/store/tags?type=file&prefix=folder:

        Parameters
        ----------
        type : typing.Optional[str]

        prefix : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TagsResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.store_get_tags_pulse_store_tags_get(
            type="type",
            prefix="prefix",
        )
        """
        _response = self._raw_client.store_get_tags_pulse_store_tags_get(
            type=type, prefix=prefix, request_options=request_options
        )
        return _response.data

    def store_update_tags_pulse_store_tags_update_post(
        self,
        *,
        id: str,
        add_tags: typing.Optional[typing.Sequence[str]] = OMIT,
        remove_tags: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StoreResponse:
        """
        Add or remove tags from an entity.

        Example:
            POST /pulse/store/tags/update
            {
                "id": "file-uuid",
                "add_tags": ["folder:marketing", "folder:campaigns"],
                "remove_tags": ["folder:archive"]
            }

        Parameters
        ----------
        id : str
            Entity ID

        add_tags : typing.Optional[typing.Sequence[str]]
            Tags to add

        remove_tags : typing.Optional[typing.Sequence[str]]
            Tags to remove

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StoreResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.store_update_tags_pulse_store_tags_update_post(
            id="id",
        )
        """
        _response = self._raw_client.store_update_tags_pulse_store_tags_update_post(
            id=id, add_tags=add_tags, remove_tags=remove_tags, request_options=request_options
        )
        return _response.data

    def store_get_pulse_store_entity_id_get(
        self, entity_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> StoreResponse:
        """
        Get a single entity.

        GET /pulse/store/{entity_id}

        Parameters
        ----------
        entity_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StoreResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.store_get_pulse_store_entity_id_get(
            entity_id="entity_id",
        )
        """
        _response = self._raw_client.store_get_pulse_store_entity_id_get(entity_id, request_options=request_options)
        return _response.data

    def store_delete_pulse_store_entity_id_delete(
        self,
        entity_id: str,
        *,
        soft: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StoreResponse:
        """
        Delete an entity.

        DELETE /pulse/store/{entity_id}?soft=true

        Parameters
        ----------
        entity_id : str

        soft : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StoreResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.store_delete_pulse_store_entity_id_delete(
            entity_id="entity_id",
            soft=True,
        )
        """
        _response = self._raw_client.store_delete_pulse_store_entity_id_delete(
            entity_id, soft=soft, request_options=request_options
        )
        return _response.data

    def store_query_pulse_store_query_post(
        self,
        *,
        type: typing.Optional[str] = OMIT,
        filter: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        tags: typing.Optional[typing.Sequence[str]] = OMIT,
        limit: typing.Optional[int] = OMIT,
        include_deleted: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StoreResponse:
        """
        Query entities with filters.

        Example:
            POST /pulse/store/query
            {
                "type": "file",
                "tags": ["folder:marketing"],
                "filter": {
                    "completed": false
                },
                "limit": 50
            }

        Parameters
        ----------
        type : typing.Optional[str]
            Filter by entity type

        filter : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Filter by data fields

        tags : typing.Optional[typing.Sequence[str]]
            Filter by tags (must have ALL specified tags)

        limit : typing.Optional[int]
            Max results

        include_deleted : typing.Optional[bool]
            Include soft-deleted entities

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StoreResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.store_query_pulse_store_query_post()
        """
        _response = self._raw_client.store_query_pulse_store_query_post(
            type=type,
            filter=filter,
            tags=tags,
            limit=limit,
            include_deleted=include_deleted,
            request_options=request_options,
        )
        return _response.data

    def store_query_fluent_pulse_store_query_fluent_post(
        self,
        *,
        select: str,
        where: typing.Optional[typing.Sequence[typing.Dict[str, typing.Optional[typing.Any]]]] = OMIT,
        with_: typing.Optional[typing.Sequence[FluentQueryRequestWithItem]] = OMIT,
        order_by: typing.Optional[typing.Sequence[typing.Dict[str, str]]] = OMIT,
        limit: typing.Optional[int] = OMIT,
        offset: typing.Optional[int] = OMIT,
        cursor: typing.Optional[str] = OMIT,
        count: typing.Optional[bool] = OMIT,
        group_by: typing.Optional[str] = OMIT,
        aggregations: typing.Optional[typing.Dict[str, typing.Dict[str, str]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Dict[str, typing.Optional[typing.Any]]:
        """
        Powerful fluent query API with relationships and advanced filtering.

        Example:
            POST /pulse/store/query/fluent
            {
                "select": "deal",
                "where": [
                    {"field": "stage", "operator": "in", "value": ["negotiation", "proposal"]},
                    {"field": "value", "operator": ">=", "value": 50000}
                ],
                "with": ["account", "contact"],
                "orderBy": [{"field": "value", "direction": "desc"}],
                "limit": 50
            }

        Returns:
            {
                "ok": true,
                "data": [entity, ...],
                "total": 123,
                "includes": {
                    "account": {entity_id: account_entity},
                    "contact": {entity_id: contact_entity}
                }
            }

        Parameters
        ----------
        select : str
            Entity type to select

        where : typing.Optional[typing.Sequence[typing.Dict[str, typing.Optional[typing.Any]]]]
            WHERE conditions: [{field, operator, value}, ...]

        with_ : typing.Optional[typing.Sequence[FluentQueryRequestWithItem]]
            Relations to include (auto-JOIN)

        order_by : typing.Optional[typing.Sequence[typing.Dict[str, str]]]
            Order by: [{field, direction}, ...]

        limit : typing.Optional[int]
            Max results

        offset : typing.Optional[int]
            Offset for pagination

        cursor : typing.Optional[str]
            Cursor for pagination

        count : typing.Optional[bool]
            Include total count

        group_by : typing.Optional[str]
            Group by field

        aggregations : typing.Optional[typing.Dict[str, typing.Dict[str, str]]]
            Aggregations: {alias: {function, field}}

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[typing.Any]]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.store_query_fluent_pulse_store_query_fluent_post(
            select="select",
        )
        """
        _response = self._raw_client.store_query_fluent_pulse_store_query_fluent_post(
            select=select,
            where=where,
            with_=with_,
            order_by=order_by,
            limit=limit,
            offset=offset,
            cursor=cursor,
            count=count,
            group_by=group_by,
            aggregations=aggregations,
            request_options=request_options,
        )
        return _response.data

    def store_batch_create_pulse_store_batch_create_post(
        self, *, entities: typing.Sequence[CreateEntityRequest], request_options: typing.Optional[RequestOptions] = None
    ) -> StoreResponse:
        """
        Create multiple entities.

        Example:
            POST /pulse/store/batch/create
            {
                "entities": [
                    {"type": "todo", "data": {"title": "Task 1"}},
                    {"type": "todo", "data": {"title": "Task 2"}}
                ]
            }

        Parameters
        ----------
        entities : typing.Sequence[CreateEntityRequest]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StoreResponse
            Successful Response

        Examples
        --------
        from scoutos import CreateEntityRequest, Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.store_batch_create_pulse_store_batch_create_post(
            entities=[
                CreateEntityRequest(
                    type="type",
                    data={"key": "value"},
                )
            ],
        )
        """
        _response = self._raw_client.store_batch_create_pulse_store_batch_create_post(
            entities=entities, request_options=request_options
        )
        return _response.data

    def list_entities_pulse_entities_get(
        self,
        *,
        limit: typing.Optional[int] = None,
        entity_type: typing.Optional[str] = None,
        current_state: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        List all entities extracted from activities.

        Returns entities with their mention counts and metadata.
        Used by the frontend ChannelEntitiesPanel.

        Parameters
        ----------
        limit : typing.Optional[int]

        entity_type : typing.Optional[str]
            Filter by entity type

        current_state : typing.Optional[bool]
            Return only current state via quantum collapse

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.list_entities_pulse_entities_get(
            limit=1,
            entity_type="entity_type",
            current_state=True,
        )
        """
        _response = self._raw_client.list_entities_pulse_entities_get(
            limit=limit, entity_type=entity_type, current_state=current_state, request_options=request_options
        )
        return _response.data

    def query_entities_pulse_entities_query_post(
        self,
        *,
        entity_type: typing.Optional[str] = OMIT,
        activity_filters: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        tags: typing.Optional[typing.Sequence[str]] = OMIT,
        outcomes: typing.Optional[typing.Sequence[str]] = OMIT,
        actions: typing.Optional[typing.Sequence[str]] = OMIT,
        time: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        kinds: typing.Optional[typing.Sequence[str]] = OMIT,
        roles: typing.Optional[typing.Sequence[str]] = OMIT,
        current_state: typing.Optional[bool] = OMIT,
        include_stats: typing.Optional[bool] = OMIT,
        group_by: typing.Optional[str] = OMIT,
        limit: typing.Optional[int] = OMIT,
        min_activities: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Query entities (agents or objects) across activities

        Examples:

        # Find all sales agents
        {
            "entity_type": "agent",
            "tags": ["sales"],
            "include_stats": true
        }

        # Find documents involved in approved deals
        {
            "entity_type": "object",
            "kinds": ["document", "contract"],
            "outcomes": ["approved"],
            "include_stats": true
        }

        # Find active users in last 7 days
        {
            "entity_type": "agent",
            "kinds": ["user"],
            "time": {"last": "7d"},
            "min_activities": 5,
            "include_stats": true
        }

        # Find cross-functional agents (sales + engineering)
        {
            "entity_type": "agent",
            "tags": ["sales", "engineering"],
            "group_by": "kind"
        }

        Parameters
        ----------
        entity_type : typing.Optional[str]
            'agent' or 'object'

        activity_filters : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Filter activities that entities appear in

        tags : typing.Optional[typing.Sequence[str]]
            Activities must have these tags

        outcomes : typing.Optional[typing.Sequence[str]]
            Activities must have these outcomes

        actions : typing.Optional[typing.Sequence[str]]
            Activities must have these actions

        time : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Time range for activities

        kinds : typing.Optional[typing.Sequence[str]]
            Entity kinds to include (user, team, document, etc)

        roles : typing.Optional[typing.Sequence[str]]
            Entity roles to include

        current_state : typing.Optional[bool]
            Return only current state via quantum collapse

        include_stats : typing.Optional[bool]
            Include activity statistics for each entity

        group_by : typing.Optional[str]
            Group entities by field (kind, role)

        limit : typing.Optional[int]

        min_activities : typing.Optional[int]
            Minimum activities for entity to be included

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.query_entities_pulse_entities_query_post()
        """
        _response = self._raw_client.query_entities_pulse_entities_query_post(
            entity_type=entity_type,
            activity_filters=activity_filters,
            tags=tags,
            outcomes=outcomes,
            actions=actions,
            time=time,
            kinds=kinds,
            roles=roles,
            current_state=current_state,
            include_stats=include_stats,
            group_by=group_by,
            limit=limit,
            min_activities=min_activities,
            request_options=request_options,
        )
        return _response.data

    def get_entity_network_pulse_entities_entity_id_network_get(
        self,
        entity_id: str,
        *,
        depth: typing.Optional[int] = None,
        min_interactions: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Get the collaboration network around an entity

        Returns entities connected to the target entity through shared activities

        Parameters
        ----------
        entity_id : str

        depth : typing.Optional[int]
            Network depth

        min_interactions : typing.Optional[int]
            Minimum interactions to include connection

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_entity_network_pulse_entities_entity_id_network_get(
            entity_id="entity_id",
            depth=1,
            min_interactions=1,
        )
        """
        _response = self._raw_client.get_entity_network_pulse_entities_entity_id_network_get(
            entity_id, depth=depth, min_interactions=min_interactions, request_options=request_options
        )
        return _response.data

    def get_entity_network_pg_pulse_entities_entity_id_network_pg_get(
        self,
        entity_id: str,
        *,
        depth: typing.Optional[int] = None,
        min_interactions: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Get the collaboration network around an entity using PostgreSQL.

        Returns entities connected to the target entity through shared activities.
        This is optimized for PostgreSQL and uses efficient SQL queries instead of
        multiple API calls.

        Parameters
        ----------
        entity_id : str

        depth : typing.Optional[int]
            Network depth

        min_interactions : typing.Optional[int]
            Minimum interactions to include connection

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_entity_network_pg_pulse_entities_entity_id_network_pg_get(
            entity_id="entity_id",
            depth=1,
            min_interactions=1,
        )
        """
        _response = self._raw_client.get_entity_network_pg_pulse_entities_entity_id_network_pg_get(
            entity_id, depth=depth, min_interactions=min_interactions, request_options=request_options
        )
        return _response.data

    def get_entity_details_pulse_entities_entity_type_entity_id_get(
        self,
        entity_type: str,
        entity_id: str,
        *,
        include_activities: typing.Optional[bool] = None,
        time_range: typing.Optional[str] = None,
        current_state: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Get detailed information about a specific entity

        When current_state=true, uses quantum collapse to return only the latest state.
        Otherwise includes all activities they've been involved in and collaboration patterns.

        Parameters
        ----------
        entity_type : str

        entity_id : str

        include_activities : typing.Optional[bool]

        time_range : typing.Optional[str]
            Time range like '7d', '30d'

        current_state : typing.Optional[bool]
            Return only current state via quantum collapse

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_entity_details_pulse_entities_entity_type_entity_id_get(
            entity_type="entity_type",
            entity_id="entity_id",
            include_activities=True,
            time_range="time_range",
            current_state=True,
        )
        """
        _response = self._raw_client.get_entity_details_pulse_entities_entity_type_entity_id_get(
            entity_type,
            entity_id,
            include_activities=include_activities,
            time_range=time_range,
            current_state=current_state,
            request_options=request_options,
        )
        return _response.data

    def get_schemas_pulse_schemas_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SchemasResponse:
        """
        Get all schemas for dynamic form generation.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SchemasResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_schemas_pulse_schemas_get()
        """
        _response = self._raw_client.get_schemas_pulse_schemas_get(request_options=request_options)
        return _response.data

    def search_activities_pulse_search_post(
        self,
        *,
        query: typing.Optional[str] = OMIT,
        search_type: typing.Optional[SearchRequestSearchType] = OMIT,
        filters: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        limit: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Hybrid search for activities using PostgreSQL full-text and vector search.

        Thin handler - delegates to PulseSearch domain API.

        Parameters
        ----------
        query : typing.Optional[str]
            Search query text

        search_type : typing.Optional[SearchRequestSearchType]
            Type of search

        filters : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Additional filters to apply

        limit : typing.Optional[int]
            Maximum results to return

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.search_activities_pulse_search_post()
        """
        _response = self._raw_client.search_activities_pulse_search_post(
            query=query, search_type=search_type, filters=filters, limit=limit, request_options=request_options
        )
        return _response.data

    def search_entities_pulse_search_entities_post(
        self,
        *,
        query: str,
        entity_ids: typing.Optional[typing.Sequence[str]] = OMIT,
        entity_types: typing.Optional[typing.Sequence[str]] = OMIT,
        mode: typing.Optional[EntitySearchRequestMode] = OMIT,
        return_format: typing.Optional[EntitySearchRequestReturnFormat] = OMIT,
        limit: typing.Optional[int] = OMIT,
        similarity_threshold: typing.Optional[float] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Search for entities with document content using hybrid search.

        Thin handler - delegates to PulseSearch domain API.

        Parameters
        ----------
        query : str
            Search query text

        entity_ids : typing.Optional[typing.Sequence[str]]
            Specific entity IDs to search within

        entity_types : typing.Optional[typing.Sequence[str]]
            Entity types to search (file, note, etc)

        mode : typing.Optional[EntitySearchRequestMode]
            Search mode

        return_format : typing.Optional[EntitySearchRequestReturnFormat]
            What to return - chunks, entity info, or full text

        limit : typing.Optional[int]
            Max results

        similarity_threshold : typing.Optional[float]
            Minimum similarity score

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.search_entities_pulse_search_entities_post(
            query="query",
        )
        """
        _response = self._raw_client.search_entities_pulse_search_entities_post(
            query=query,
            entity_ids=entity_ids,
            entity_types=entity_types,
            mode=mode,
            return_format=return_format,
            limit=limit,
            similarity_threshold=similarity_threshold,
            request_options=request_options,
        )
        return _response.data

    def update_search_indexes_pulse_search_update_indexes_post(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Update search indexes for existing activities.

        Thin handler - delegates to PulseSearch domain API.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.update_search_indexes_pulse_search_update_indexes_post()
        """
        _response = self._raw_client.update_search_indexes_pulse_search_update_indexes_post(
            request_options=request_options
        )
        return _response.data

    def get_distinct_values_pulse_search_distinct_field_get(
        self, field: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Get distinct values for a specific field to help with query building.

        Thin handler - delegates to PulseSearch domain API.

        Parameters
        ----------
        field : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_distinct_values_pulse_search_distinct_field_get(
            field="field",
        )
        """
        _response = self._raw_client.get_distinct_values_pulse_search_distinct_field_get(
            field, request_options=request_options
        )
        return _response.data

    def query_builder_pulse_query_post(
        self,
        *,
        limit: typing.Optional[int] = OMIT,
        offset: typing.Optional[int] = OMIT,
        text_query: typing.Optional[str] = OMIT,
        time_range_start: typing.Optional[dt.datetime] = OMIT,
        time_range_end: typing.Optional[dt.datetime] = OMIT,
        last_hours: typing.Optional[int] = OMIT,
        last_days: typing.Optional[int] = OMIT,
        agent_types: typing.Optional[typing.Sequence[str]] = OMIT,
        agent_ids: typing.Optional[typing.Sequence[str]] = OMIT,
        object_types: typing.Optional[typing.Sequence[str]] = OMIT,
        object_ids: typing.Optional[typing.Sequence[str]] = OMIT,
        action_types: typing.Optional[typing.Sequence[str]] = OMIT,
        action_statuses: typing.Optional[typing.Sequence[str]] = OMIT,
        specific_actions: typing.Optional[typing.Sequence[str]] = OMIT,
        tags: typing.Optional[typing.Sequence[str]] = OMIT,
        exclude_tags: typing.Optional[typing.Sequence[str]] = OMIT,
        tag_mode: typing.Optional[QueryBuilderRequestTagMode] = OMIT,
        min_duration_minutes: typing.Optional[float] = OMIT,
        max_duration_minutes: typing.Optional[float] = OMIT,
        customer_id: typing.Optional[str] = OMIT,
        team_name: typing.Optional[str] = OMIT,
        deal_stages: typing.Optional[typing.Sequence[str]] = OMIT,
        revenue_impact: typing.Optional[bool] = OMIT,
        churn_risk: typing.Optional[bool] = OMIT,
        escalation_level: typing.Optional[str] = OMIT,
        trace_id: typing.Optional[str] = OMIT,
        triggered_by: typing.Optional[str] = OMIT,
        sort_by: typing.Optional[QueryBuilderRequestSortBy] = OMIT,
        sort_direction: typing.Optional[QueryBuilderRequestSortDirection] = OMIT,
        count_only: typing.Optional[bool] = OMIT,
        explain: typing.Optional[bool] = OMIT,
        aggregate: typing.Optional[bool] = OMIT,
        group_by: typing.Optional[typing.Sequence[QueryBuilderRequestGroupByItem]] = OMIT,
        group_by_tag_prefix: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Execute a declarative query using the powerful PulseQuery builder

        This endpoint provides a more structured and powerful alternative to text-based search,
        allowing complex filtering, aggregation, and business logic queries.

        Examples:

        # Find all activities by specific agents in last 7 days
        {
            "agent_types": ["user"],
            "last_days": 7,
            "sort_by": "time"
        }

        # Customer journey analysis
        {
            "customer_id": "customer_123",
            "last_days": 30,
            "sort_by": "time",
            "sort_direction": "asc"
        }

        # Revenue impact events with duration filters
        {
            "revenue_impact": true,
            "min_duration_minutes": 5,
            "tags": ["sales", "deal"],
            "tag_mode": "all"
        }

        # Aggregated metrics by team
        {
            "last_days": 14,
            "aggregate": true,
            "group_by": ["agent_type"],
            "team_name": "engineering"
        }

        Parameters
        ----------
        limit : typing.Optional[int]
            Maximum results to return

        offset : typing.Optional[int]
            Offset for pagination

        text_query : typing.Optional[str]
            Text to search in descriptions

        time_range_start : typing.Optional[dt.datetime]
            Start time for filtering

        time_range_end : typing.Optional[dt.datetime]
            End time for filtering

        last_hours : typing.Optional[int]
            Filter to last N hours

        last_days : typing.Optional[int]
            Filter to last N days

        agent_types : typing.Optional[typing.Sequence[str]]
            Filter by agent types

        agent_ids : typing.Optional[typing.Sequence[str]]
            Filter by specific agent IDs

        object_types : typing.Optional[typing.Sequence[str]]
            Filter by object types

        object_ids : typing.Optional[typing.Sequence[str]]
            Filter by specific object IDs

        action_types : typing.Optional[typing.Sequence[str]]
            Filter by action types

        action_statuses : typing.Optional[typing.Sequence[str]]
            Filter by action statuses

        specific_actions : typing.Optional[typing.Sequence[str]]
            Filter by specific action names

        tags : typing.Optional[typing.Sequence[str]]
            Tags to include

        exclude_tags : typing.Optional[typing.Sequence[str]]
            Tags to exclude

        tag_mode : typing.Optional[QueryBuilderRequestTagMode]
            Whether to match any or all tags

        min_duration_minutes : typing.Optional[float]
            Minimum duration in minutes

        max_duration_minutes : typing.Optional[float]
            Maximum duration in minutes

        customer_id : typing.Optional[str]
            Filter by customer ID

        team_name : typing.Optional[str]
            Filter by team

        deal_stages : typing.Optional[typing.Sequence[str]]
            Filter by deal stages

        revenue_impact : typing.Optional[bool]
            Filter for revenue impact events

        churn_risk : typing.Optional[bool]
            Filter for churn risk events

        escalation_level : typing.Optional[str]
            Filter by escalation level

        trace_id : typing.Optional[str]
            Filter by trace ID

        triggered_by : typing.Optional[str]
            Filter by triggering event

        sort_by : typing.Optional[QueryBuilderRequestSortBy]
            Sort field

        sort_direction : typing.Optional[QueryBuilderRequestSortDirection]
            Sort direction

        count_only : typing.Optional[bool]
            Return only count, not full results

        explain : typing.Optional[bool]
            Include query explanation

        aggregate : typing.Optional[bool]
            Return aggregated results

        group_by : typing.Optional[typing.Sequence[QueryBuilderRequestGroupByItem]]
            Group by fields for aggregation

        group_by_tag_prefix : typing.Optional[str]
            Group by tag prefix (e.g., 'customer:')

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.query_builder_pulse_query_post()
        """
        _response = self._raw_client.query_builder_pulse_query_post(
            limit=limit,
            offset=offset,
            text_query=text_query,
            time_range_start=time_range_start,
            time_range_end=time_range_end,
            last_hours=last_hours,
            last_days=last_days,
            agent_types=agent_types,
            agent_ids=agent_ids,
            object_types=object_types,
            object_ids=object_ids,
            action_types=action_types,
            action_statuses=action_statuses,
            specific_actions=specific_actions,
            tags=tags,
            exclude_tags=exclude_tags,
            tag_mode=tag_mode,
            min_duration_minutes=min_duration_minutes,
            max_duration_minutes=max_duration_minutes,
            customer_id=customer_id,
            team_name=team_name,
            deal_stages=deal_stages,
            revenue_impact=revenue_impact,
            churn_risk=churn_risk,
            escalation_level=escalation_level,
            trace_id=trace_id,
            triggered_by=triggered_by,
            sort_by=sort_by,
            sort_direction=sort_direction,
            count_only=count_only,
            explain=explain,
            aggregate=aggregate,
            group_by=group_by,
            group_by_tag_prefix=group_by_tag_prefix,
            request_options=request_options,
        )
        return _response.data

    def query_builder_schema_pulse_query_schema_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Get the schema for the query builder, showing all available filters and options

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.query_builder_schema_pulse_query_schema_get()
        """
        _response = self._raw_client.query_builder_schema_pulse_query_schema_get(request_options=request_options)
        return _response.data

    def upload_pulse_files_stream_pulse_files_stream_post(
        self, *, files: typing.List[core.File], request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Upload files to Pulse with activity tracking and optional RAG processing.
        Returns a streaming response with progress updates.

        Thin handler - delegates to PulseFiles domain API.

        Parameters
        ----------
        files : typing.List[core.File]
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.upload_pulse_files_stream_pulse_files_stream_post()
        """
        _response = self._raw_client.upload_pulse_files_stream_pulse_files_stream_post(
            files=files, request_options=request_options
        )
        return _response.data

    def get_pulse_files_pulse_files_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Get list of files for an organization.

        Thin handler - delegates to PulseFiles domain API.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_pulse_files_pulse_files_get()
        """
        _response = self._raw_client.get_pulse_files_pulse_files_get(request_options=request_options)
        return _response.data

    def download_pulse_file_pulse_files_file_name_get(
        self, file_name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Get a signed URL for downloading a file.

        Thin handler - delegates to PulseFiles domain API.

        Parameters
        ----------
        file_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.download_pulse_file_pulse_files_file_name_get(
            file_name="file_name",
        )
        """
        _response = self._raw_client.download_pulse_file_pulse_files_file_name_get(
            file_name, request_options=request_options
        )
        return _response.data

    def delete_pulse_file_pulse_files_file_name_delete(
        self, file_name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Delete a file and its associated chunks.

        Thin handler - delegates to PulseFiles domain API.

        Parameters
        ----------
        file_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.delete_pulse_file_pulse_files_file_name_delete(
            file_name="file_name",
        )
        """
        _response = self._raw_client.delete_pulse_file_pulse_files_file_name_delete(
            file_name, request_options=request_options
        )
        return _response.data

    def get_file_chunks_pulse_files_file_name_chunks_get(
        self, file_name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Get RAG document chunks for a file.

        Thin handler - delegates to PulseFiles domain API.

        Parameters
        ----------
        file_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_file_chunks_pulse_files_file_name_chunks_get(
            file_name="file_name",
        )
        """
        _response = self._raw_client.get_file_chunks_pulse_files_file_name_chunks_get(
            file_name, request_options=request_options
        )
        return _response.data

    def generate_ai_suggestion_pulse_security_questionnaire_ai_suggest_post(
        self,
        *,
        question_id: str,
        question_text: str,
        category: str,
        questionnaire_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Generate AI suggestion for a security question using RAG.

        Thin handler - delegates to PulseQuestionnaire domain API.

        Parameters
        ----------
        question_id : str

        question_text : str

        category : str

        questionnaire_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.generate_ai_suggestion_pulse_security_questionnaire_ai_suggest_post(
            question_id="question_id",
            question_text="question_text",
            category="category",
            questionnaire_id="questionnaire_id",
        )
        """
        _response = self._raw_client.generate_ai_suggestion_pulse_security_questionnaire_ai_suggest_post(
            question_id=question_id,
            question_text=question_text,
            category=category,
            questionnaire_id=questionnaire_id,
            request_options=request_options,
        )
        return _response.data

    def generate_batch_suggestions_pulse_security_questionnaire_batch_suggest_post(
        self,
        *,
        question_ids: typing.Sequence[str],
        questionnaire_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Generate AI suggestions for multiple questions in batch.

        Thin handler - delegates to PulseQuestionnaire domain API.

        Parameters
        ----------
        question_ids : typing.Sequence[str]

        questionnaire_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.generate_batch_suggestions_pulse_security_questionnaire_batch_suggest_post(
            question_ids=["question_ids"],
            questionnaire_id="questionnaire_id",
        )
        """
        _response = self._raw_client.generate_batch_suggestions_pulse_security_questionnaire_batch_suggest_post(
            question_ids=question_ids, questionnaire_id=questionnaire_id, request_options=request_options
        )
        return _response.data

    def update_questionnaire_files_pulse_security_questionnaire_questionnaire_id_files_put(
        self,
        questionnaire_id: str,
        *,
        file_ids: typing.Sequence[str],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Update the selected files for a questionnaire.

        Thin handler - delegates to PulseQuestionnaire domain API.

        Parameters
        ----------
        questionnaire_id : str

        file_ids : typing.Sequence[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.update_questionnaire_files_pulse_security_questionnaire_questionnaire_id_files_put(
            questionnaire_id="questionnaire_id",
            file_ids=["file_ids"],
        )
        """
        _response = self._raw_client.update_questionnaire_files_pulse_security_questionnaire_questionnaire_id_files_put(
            questionnaire_id, file_ids=file_ids, request_options=request_options
        )
        return _response.data

    def get_questionnaire_with_questions_pulse_security_questionnaire_questionnaire_id_get(
        self, questionnaire_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Get questionnaire with all its questions loaded.

        Thin handler - delegates to PulseQuestionnaire domain API.

        Parameters
        ----------
        questionnaire_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_questionnaire_with_questions_pulse_security_questionnaire_questionnaire_id_get(
            questionnaire_id="questionnaire_id",
        )
        """
        _response = self._raw_client.get_questionnaire_with_questions_pulse_security_questionnaire_questionnaire_id_get(
            questionnaire_id, request_options=request_options
        )
        return _response.data

    def seed_agents_onboarding_seed_agents_post(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Manually seed default agent personas for a new organization.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.seed_agents_onboarding_seed_agents_post()
        """
        _response = self._raw_client.seed_agents_onboarding_seed_agents_post(request_options=request_options)
        return _response.data

    def find_me_me_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SrcAppHttpRoutesOnboardingHandleGetMeResponse:
        """
        Get the current authenticated user's information.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SrcAppHttpRoutesOnboardingHandleGetMeResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.find_me_me_get()
        """
        _response = self._raw_client.find_me_me_get(request_options=request_options)
        return _response.data

    def update_me_me_put(
        self,
        *,
        favorites: typing.Optional[typing.Sequence[FavoriteRef]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SrcAppHttpRoutesOnboardingHandleUpdateMeResponse:
        """
        Update the current authenticated user's information.

        Parameters
        ----------
        favorites : typing.Optional[typing.Sequence[FavoriteRef]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SrcAppHttpRoutesOnboardingHandleUpdateMeResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.update_me_me_put()
        """
        _response = self._raw_client.update_me_me_put(favorites=favorites, request_options=request_options)
        return _response.data

    def find_all_scout_hooks_hooks_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ScoutHooksResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ScoutHooksResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.find_all_scout_hooks_hooks_get()
        """
        _response = self._raw_client.find_all_scout_hooks_hooks_get(request_options=request_options)
        return _response.data

    def create_scout_hook_hooks_post(
        self,
        *,
        hook_config: typing.Optional[ScoutHookConfigHttp] = OMIT,
        name: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        triggering_events: typing.Optional[typing.Sequence[ScoutHookUpdateTriggeringEventsItem]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ScoutHookResponse:
        """
        Parameters
        ----------
        hook_config : typing.Optional[ScoutHookConfigHttp]

        name : typing.Optional[str]

        description : typing.Optional[str]

        metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        triggering_events : typing.Optional[typing.Sequence[ScoutHookUpdateTriggeringEventsItem]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ScoutHookResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.create_scout_hook_hooks_post()
        """
        _response = self._raw_client.create_scout_hook_hooks_post(
            hook_config=hook_config,
            name=name,
            description=description,
            metadata=metadata,
            triggering_events=triggering_events,
            request_options=request_options,
        )
        return _response.data

    def update_scout_hook_hooks_hook_id_put(
        self,
        hook_id: str,
        *,
        hook_config: typing.Optional[ScoutHookConfigHttp] = OMIT,
        name: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        triggering_events: typing.Optional[typing.Sequence[ScoutHookUpdateTriggeringEventsItem]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ScoutHookResponse:
        """
        Parameters
        ----------
        hook_id : str

        hook_config : typing.Optional[ScoutHookConfigHttp]

        name : typing.Optional[str]

        description : typing.Optional[str]

        metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        triggering_events : typing.Optional[typing.Sequence[ScoutHookUpdateTriggeringEventsItem]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ScoutHookResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.update_scout_hook_hooks_hook_id_put(
            hook_id="hook_id",
        )
        """
        _response = self._raw_client.update_scout_hook_hooks_hook_id_put(
            hook_id,
            hook_config=hook_config,
            name=name,
            description=description,
            metadata=metadata,
            triggering_events=triggering_events,
            request_options=request_options,
        )
        return _response.data

    def remove_scout_hook_hooks_hook_id_delete(
        self, hook_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        hook_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.remove_scout_hook_hooks_hook_id_delete(
            hook_id="hook_id",
        )
        """
        _response = self._raw_client.remove_scout_hook_hooks_hook_id_delete(hook_id, request_options=request_options)
        return _response.data

    def rotate_api_keys_organization_rotate_keys_post(
        self,
        *,
        confirm: typing.Optional[bool] = OMIT,
        grace_period_hours: typing.Optional[float] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Rotate API keys for the current organization.

        Delegates to ProfileManager for the actual business logic.

        Parameters
        ----------
        confirm : typing.Optional[bool]

        grace_period_hours : typing.Optional[float]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.rotate_api_keys_organization_rotate_keys_post()
        """
        _response = self._raw_client.rotate_api_keys_organization_rotate_keys_post(
            confirm=confirm, grace_period_hours=grace_period_hours, request_options=request_options
        )
        return _response.data

    def list_tags_tags_get(self, *, request_options: typing.Optional[RequestOptions] = None) -> ListTagsResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListTagsResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.list_tags_tags_get()
        """
        _response = self._raw_client.list_tags_tags_get(request_options=request_options)
        return _response.data

    def create_tag_tags_post(
        self,
        *,
        name: str,
        description: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateTagResponse:
        """
        Parameters
        ----------
        name : str

        description : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateTagResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.create_tag_tags_post(
            name="name",
        )
        """
        _response = self._raw_client.create_tag_tags_post(
            name=name, description=description, request_options=request_options
        )
        return _response.data

    def get_tag_tags_tag_id_get(self, tag_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> Tag:
        """
        Parameters
        ----------
        tag_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Tag
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_tag_tags_tag_id_get(
            tag_id="tag_id",
        )
        """
        _response = self._raw_client.get_tag_tags_tag_id_get(tag_id, request_options=request_options)
        return _response.data

    def update_tag_tags_tag_id_put(
        self,
        tag_id: str,
        *,
        name: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        active: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateTagResponse:
        """
        Parameters
        ----------
        tag_id : str

        name : typing.Optional[str]

        description : typing.Optional[str]

        active : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateTagResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.update_tag_tags_tag_id_put(
            tag_id="tag_id",
        )
        """
        _response = self._raw_client.update_tag_tags_tag_id_put(
            tag_id, name=name, description=description, active=active, request_options=request_options
        )
        return _response.data

    def list_tools_tools_get(self, *, request_options: typing.Optional[RequestOptions] = None) -> ListToolsResponse:
        """
        Get available tools for the organization with full input schemas.

        This endpoint delegates to the Tool domain API which provides:
        - Tool authorization checking
        - Schema retrieval from all sources
        - Comprehensive tool information

        Args:
            request: The FastAPI request

        Returns:
            ListToolsResponse with detailed tool information

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListToolsResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.list_tools_tools_get()
        """
        _response = self._raw_client.list_tools_tools_get(request_options=request_options)
        return _response.data

    def get_tool_tools_tool_name_get(
        self, tool_name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ToolDetails:
        """
        Get detailed information about a specific tool.

        This endpoint returns comprehensive information about a single tool including:
        - Tool metadata (name, description, icon)
        - Input schema
        - Labels and categorization

        Args:
            request: The FastAPI request
            tool_name: The name of the tool to retrieve

        Returns:
            ToolDetails with comprehensive tool information

        Raises:
            HTTPException: 404 if tool not found, 403 if not available

        Parameters
        ----------
        tool_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ToolDetails
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_tool_tools_tool_name_get(
            tool_name="tool_name",
        )
        """
        _response = self._raw_client.get_tool_tools_tool_name_get(tool_name, request_options=request_options)
        return _response.data

    def execute_tool_tools_tool_name_execute_post(
        self,
        tool_name: str,
        *,
        input_data: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ExecuteToolResponse:
        """
        Execute a specific tool.

        This endpoint delegates to the Tool domain API which handles:
        - Tool authorization
        - Tool discovery from all sources
        - Context injection
        - Tool execution

        Args:
            request: The FastAPI request
            tool_name: The name of the tool to execute (from path parameter)
            body: The tool execution request body

        Returns:
            ExecuteToolResponse with execution result or error

        Parameters
        ----------
        tool_name : str

        input_data : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Input data for the tool execution

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ExecuteToolResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.execute_tool_tools_tool_name_execute_post(
            tool_name="tool_name",
        )
        """
        _response = self._raw_client.execute_tool_tools_tool_name_execute_post(
            tool_name, input_data=input_data, request_options=request_options
        )
        return _response.data

    def interact_handler_world_agent_id_session_id_interact_post(
        self,
        agent_id: str,
        session_id: str,
        *,
        messages: typing.Sequence[SrcAppHttpRoutesWorldInteractIncomingMessage],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        agent_id : str

        session_id : str

        messages : typing.Sequence[SrcAppHttpRoutesWorldInteractIncomingMessage]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout, SrcAppHttpRoutesWorldInteractIncomingMessage

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.interact_handler_world_agent_id_session_id_interact_post(
            agent_id="agent_id",
            session_id="session_id",
            messages=[
                SrcAppHttpRoutesWorldInteractIncomingMessage(
                    content="content",
                )
            ],
        )
        """
        _response = self._raw_client.interact_handler_world_agent_id_session_id_interact_post(
            agent_id, session_id, messages=messages, request_options=request_options
        )
        return _response.data

    def interact_handler_world_agent_id_interact_post(
        self,
        agent_id: str,
        *,
        messages: typing.Sequence[SrcAppHttpRoutesWorldInteractIncomingMessage],
        session_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        agent_id : str

        messages : typing.Sequence[SrcAppHttpRoutesWorldInteractIncomingMessage]

        session_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout, SrcAppHttpRoutesWorldInteractIncomingMessage

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.interact_handler_world_agent_id_interact_post(
            agent_id="agent_id",
            session_id="session_id",
            messages=[
                SrcAppHttpRoutesWorldInteractIncomingMessage(
                    content="content",
                )
            ],
        )
        """
        _response = self._raw_client.interact_handler_world_agent_id_interact_post(
            agent_id, messages=messages, session_id=session_id, request_options=request_options
        )
        return _response.data

    def list_agents_agents_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.list_agents_agents_get()
        """
        _response = self._raw_client.list_agents_agents_get(request_options=request_options)
        return _response.data

    def upsert_agent_agents_post(
        self,
        *,
        agent: str,
        revision: str,
        agent_image: core.File,
        agent_id: typing.Optional[str] = OMIT,
        activate: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        agent : str

        revision : str

        agent_image : core.File
            See core.File for more documentation

        agent_id : typing.Optional[str]

        activate : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.upsert_agent_agents_post(
            agent="agent",
            revision="revision",
        )
        """
        _response = self._raw_client.upsert_agent_agents_post(
            agent=agent,
            revision=revision,
            agent_image=agent_image,
            agent_id=agent_id,
            activate=activate,
            request_options=request_options,
        )
        return _response.data

    def get_active_agent_agents_agent_id_active_get(
        self, agent_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Retrieve an agent and its active revision by agent_id.
        Verifies that the agent belongs to the actor's organization.

        Parameters
        ----------
        agent_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_active_agent_agents_agent_id_active_get(
            agent_id="agent_id",
        )
        """
        _response = self._raw_client.get_active_agent_agents_agent_id_active_get(
            agent_id, request_options=request_options
        )
        return _response.data

    def get_tools_agents_tools_get(self, *, request_options: typing.Optional[RequestOptions] = None) -> ToolsResponse:
        """
        Get available tools for the organization.

        Args:
            request: The FastAPI request

        Returns:
            Span with the list of available tools attached to its attributes

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ToolsResponse
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_tools_agents_tools_get()
        """
        _response = self._raw_client.get_tools_agents_tools_get(request_options=request_options)
        return _response.data

    def delete_agent_agents_agent_id_delete(
        self, agent_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        agent_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.delete_agent_agents_agent_id_delete(
            agent_id="agent_id",
        )
        """
        _response = self._raw_client.delete_agent_agents_agent_id_delete(agent_id, request_options=request_options)
        return _response.data

    def expire_blobs_expire_blobs_post(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.expire_blobs_expire_blobs_post()
        """
        _response = self._raw_client.expire_blobs_expire_blobs_post(request_options=request_options)
        return _response.data

    def get_drive_drive_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_drive_drive_get()
        """
        _response = self._raw_client.get_drive_drive_get(request_options=request_options)
        return _response.data

    def get_drive_file_drive_files_file_name_get(
        self, file_name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        file_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.get_drive_file_drive_files_file_name_get(
            file_name="file_name",
        )
        """
        _response = self._raw_client.get_drive_file_drive_files_file_name_get(
            file_name, request_options=request_options
        )
        return _response.data

    def upload_files_to_drive_drive_files_post(
        self, *, files: typing.List[core.File], request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        files : typing.List[core.File]
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.upload_files_to_drive_drive_files_post()
        """
        _response = self._raw_client.upload_files_to_drive_drive_files_post(
            files=files, request_options=request_options
        )
        return _response.data

    def create_drive_crawl_drive_crawls_post(
        self,
        *,
        source_sync_settings: SrcAppHttpRoutesDriveCreateDriveCrawlPayloadSourceSyncSettings,
        url: str,
        schedule: typing.Optional[Schedule] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Since we do not have domain apis for collections we have to import
        the route functions and pass the request through.

        We could get the org key and move this logic to the drive domain api
        but we would then need to get the org secret key to make http requests
        since importing into the drive domain api would cause circular dependencies.
        Which then forces us to use network requests via scout sdk or httpx.

        This is the lesser evil I.M.O.

        Parameters
        ----------
        source_sync_settings : SrcAppHttpRoutesDriveCreateDriveCrawlPayloadSourceSyncSettings

        url : str

        schedule : typing.Optional[Schedule]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout, SourceSyncGoogleDriveSettings

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.create_drive_crawl_drive_crawls_post(
            source_sync_settings=SourceSyncGoogleDriveSettings(),
            url="url",
        )
        """
        _response = self._raw_client.create_drive_crawl_drive_crawls_post(
            source_sync_settings=source_sync_settings, url=url, schedule=schedule, request_options=request_options
        )
        return _response.data

    def grant_access_drive_grant_post(
        self,
        *,
        agent_ids: typing.Sequence[str],
        resources: typing.Sequence[Resource],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        agent_ids : typing.Sequence[str]

        resources : typing.Sequence[Resource]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Resource, Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.grant_access_drive_grant_post(
            agent_ids=["agent_ids"],
            resources=[
                Resource(
                    resource_id="resource_id",
                    resource_type="tables",
                )
            ],
        )
        """
        _response = self._raw_client.grant_access_drive_grant_post(
            agent_ids=agent_ids, resources=resources, request_options=request_options
        )
        return _response.data

    def revoke_access_drive_revoke_post(
        self,
        *,
        agent_ids: typing.Sequence[str],
        resource_ids: typing.Sequence[str],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        agent_ids : typing.Sequence[str]

        resource_ids : typing.Sequence[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from scoutos import Scout

        client = Scout(
            api_key="YOUR_API_KEY",
        )
        client.revoke_access_drive_revoke_post(
            agent_ids=["agent_ids"],
            resource_ids=["resource_ids"],
        )
        """
        _response = self._raw_client.revoke_access_drive_revoke_post(
            agent_ids=agent_ids, resource_ids=resource_ids, request_options=request_options
        )
        return _response.data

    @property
    def workflows(self):
        if self._workflows is None:
            from .workflows.client import WorkflowsClient  # noqa: E402

            self._workflows = WorkflowsClient(client_wrapper=self._client_wrapper)
        return self._workflows

    @property
    def environments(self):
        if self._environments is None:
            from .environments.client import EnvironmentsClient  # noqa: E402

            self._environments = EnvironmentsClient(client_wrapper=self._client_wrapper)
        return self._environments

    @property
    def revisions(self):
        if self._revisions is None:
            from .revisions.client import RevisionsClient  # noqa: E402

            self._revisions = RevisionsClient(client_wrapper=self._client_wrapper)
        return self._revisions

    @property
    def usage(self):
        if self._usage is None:
            from .usage.client import UsageClient  # noqa: E402

            self._usage = UsageClient(client_wrapper=self._client_wrapper)
        return self._usage

    @property
    def workflow_logs(self):
        if self._workflow_logs is None:
            from .workflow_logs.client import WorkflowLogsClient  # noqa: E402

            self._workflow_logs = WorkflowLogsClient(client_wrapper=self._client_wrapper)
        return self._workflow_logs

    @property
    def copilots(self):
        if self._copilots is None:
            from .copilots.client import CopilotsClient  # noqa: E402

            self._copilots = CopilotsClient(client_wrapper=self._client_wrapper)
        return self._copilots

    @property
    def triggers(self):
        if self._triggers is None:
            from .triggers.client import TriggersClient  # noqa: E402

            self._triggers = TriggersClient(client_wrapper=self._client_wrapper)
        return self._triggers

    @property
    def integrations(self):
        if self._integrations is None:
            from .integrations.client import IntegrationsClient  # noqa: E402

            self._integrations = IntegrationsClient(client_wrapper=self._client_wrapper)
        return self._integrations

    @property
    def organizations(self):
        if self._organizations is None:
            from .organizations.client import OrganizationsClient  # noqa: E402

            self._organizations = OrganizationsClient(client_wrapper=self._client_wrapper)
        return self._organizations

    @property
    def collections(self):
        if self._collections is None:
            from .collections.client import CollectionsClient  # noqa: E402

            self._collections = CollectionsClient(client_wrapper=self._client_wrapper)
        return self._collections

    @property
    def tables(self):
        if self._tables is None:
            from .tables.client import TablesClient  # noqa: E402

            self._tables = TablesClient(client_wrapper=self._client_wrapper)
        return self._tables

    @property
    def documents(self):
        if self._documents is None:
            from .documents.client import DocumentsClient  # noqa: E402

            self._documents = DocumentsClient(client_wrapper=self._client_wrapper)
        return self._documents

    @property
    def sources(self):
        if self._sources is None:
            from .sources.client import SourcesClient  # noqa: E402

            self._sources = SourcesClient(client_wrapper=self._client_wrapper)
        return self._sources

    @property
    def syncs(self):
        if self._syncs is None:
            from .syncs.client import SyncsClient  # noqa: E402

            self._syncs = SyncsClient(client_wrapper=self._client_wrapper)
        return self._syncs


class AsyncScout:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : ScoutEnvironment
        The environment to use for requests from the client. from .environment import ScoutEnvironment



        Defaults to ScoutEnvironment.PROD



    api_key : typing.Optional[typing.Union[str, typing.Callable[[], str]]]
    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from scoutos import AsyncScout

    client = AsyncScout(
        api_key="YOUR_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: ScoutEnvironment = ScoutEnvironment.PROD,
        api_key: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = os.getenv("SCOUT_API_KEY"),
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            api_key=api_key,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._raw_client = AsyncRawScout(client_wrapper=self._client_wrapper)
        self._workflows: typing.Optional[AsyncWorkflowsClient] = None
        self._environments: typing.Optional[AsyncEnvironmentsClient] = None
        self._revisions: typing.Optional[AsyncRevisionsClient] = None
        self._usage: typing.Optional[AsyncUsageClient] = None
        self._workflow_logs: typing.Optional[AsyncWorkflowLogsClient] = None
        self._copilots: typing.Optional[AsyncCopilotsClient] = None
        self._triggers: typing.Optional[AsyncTriggersClient] = None
        self._integrations: typing.Optional[AsyncIntegrationsClient] = None
        self._organizations: typing.Optional[AsyncOrganizationsClient] = None
        self._collections: typing.Optional[AsyncCollectionsClient] = None
        self._tables: typing.Optional[AsyncTablesClient] = None
        self._documents: typing.Optional[AsyncDocumentsClient] = None
        self._sources: typing.Optional[AsyncSourcesClient] = None
        self._syncs: typing.Optional[AsyncSyncsClient] = None

    @property
    def with_raw_response(self) -> AsyncRawScout:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawScout
        """
        return self._raw_client

    async def info_handler_info_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SrcAppHttpRoutesRootGetInfoResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SrcAppHttpRoutesRootGetInfoResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.info_handler_info_get()


        asyncio.run(main())
        """
        _response = await self._raw_client.info_handler_info_get(request_options=request_options)
        return _response.data

    async def get_info_v_2_triggers_info_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_info_v_2_triggers_info_get()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_info_v_2_triggers_info_get(request_options=request_options)
        return _response.data

    async def get_info_v_2_index_info_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_info_v_2_index_info_get()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_info_v_2_index_info_get(request_options=request_options)
        return _response.data

    async def get_info_v_2_workflows_info_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_info_v_2_workflows_info_get()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_info_v_2_workflows_info_get(request_options=request_options)
        return _response.data

    async def get_info_v_2_collections_info_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_info_v_2_collections_info_get()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_info_v_2_collections_info_get(request_options=request_options)
        return _response.data

    async def parse_file_v_2_files_parse_post(
        self,
        *,
        file: core.File,
        return_text: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SrcAppHttpRoutesCollectionParseFileResponse:
        """
        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        return_text : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SrcAppHttpRoutesCollectionParseFileResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.parse_file_v_2_files_parse_post(
                return_text=True,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.parse_file_v_2_files_parse_post(
            file=file, return_text=return_text, request_options=request_options
        )
        return _response.data

    async def get_integrations_integrations_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[IntegrationWithConnections]:
        """
        Get all integrations for an organization

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[IntegrationWithConnections]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_integrations_integrations_get()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_integrations_integrations_get(request_options=request_options)
        return _response.data

    async def get_integration_integrations_integration_id_get(
        self, integration_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> IntegrationWithConnections:
        """
        Get a specific integration for an organization by its ID.

        Parameters
        ----------
        integration_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        IntegrationWithConnections
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_integration_integrations_integration_id_get(
                integration_id="integration_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_integration_integrations_integration_id_get(
            integration_id, request_options=request_options
        )
        return _response.data

    async def get_integration_connections_integrations_integration_id_connections_get(
        self, integration_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[IntegrationConnection]:
        """
        Get all integrations for an organization

        Parameters
        ----------
        integration_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[IntegrationConnection]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_integration_connections_integrations_integration_id_connections_get(
                integration_id="integration_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_integration_connections_integrations_integration_id_connections_get(
            integration_id, request_options=request_options
        )
        return _response.data

    async def connect_integration_integrations_integration_id_connect_post(
        self,
        integration_id: str,
        *,
        auth_type: ConnectIntegrationRequestAuthType,
        api_key: typing.Optional[str] = OMIT,
        code: typing.Optional[str] = OMIT,
        state: typing.Optional[str] = OMIT,
        scope: typing.Optional[str] = OMIT,
        client_id: typing.Optional[str] = OMIT,
        client_secret: typing.Optional[str] = OMIT,
        environment: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateIntegrationsResponse:
        """
        Parameters
        ----------
        integration_id : str

        auth_type : ConnectIntegrationRequestAuthType

        api_key : typing.Optional[str]

        code : typing.Optional[str]

        state : typing.Optional[str]

        scope : typing.Optional[str]

        client_id : typing.Optional[str]

        client_secret : typing.Optional[str]

        environment : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateIntegrationsResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.connect_integration_integrations_integration_id_connect_post(
                integration_id="integration_id",
                auth_type="api_key",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.connect_integration_integrations_integration_id_connect_post(
            integration_id,
            auth_type=auth_type,
            api_key=api_key,
            code=code,
            state=state,
            scope=scope,
            client_id=client_id,
            client_secret=client_secret,
            environment=environment,
            request_options=request_options,
        )
        return _response.data

    async def handle_send_message_integrations_slack_send_post(
        self,
        *,
        channel_id: str,
        text: str,
        thread_id: typing.Optional[str] = OMIT,
        blocks: typing.Optional[typing.Sequence[typing.Dict[str, typing.Optional[typing.Any]]]] = OMIT,
        username: typing.Optional[str] = OMIT,
        icon_url: typing.Optional[str] = OMIT,
        integration_id: typing.Optional[str] = OMIT,
        unfurl_links: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Dict[str, typing.Optional[typing.Any]]:
        """
        Parameters
        ----------
        channel_id : str

        text : str

        thread_id : typing.Optional[str]

        blocks : typing.Optional[typing.Sequence[typing.Dict[str, typing.Optional[typing.Any]]]]

        username : typing.Optional[str]

        icon_url : typing.Optional[str]

        integration_id : typing.Optional[str]

        unfurl_links : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[typing.Any]]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.handle_send_message_integrations_slack_send_post(
                channel_id="channel_id",
                text="text",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.handle_send_message_integrations_slack_send_post(
            channel_id=channel_id,
            text=text,
            thread_id=thread_id,
            blocks=blocks,
            username=username,
            icon_url=icon_url,
            integration_id=integration_id,
            unfurl_links=unfurl_links,
            request_options=request_options,
        )
        return _response.data

    async def handle_add_reaction_integrations_slack_react_post(
        self,
        *,
        channel_id: str,
        emoji_name: str,
        thread_id: typing.Optional[str] = OMIT,
        integration_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Dict[str, typing.Optional[typing.Any]]:
        """
        Parameters
        ----------
        channel_id : str

        emoji_name : str

        thread_id : typing.Optional[str]

        integration_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[typing.Any]]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.handle_add_reaction_integrations_slack_react_post(
                channel_id="channel_id",
                emoji_name="emoji_name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.handle_add_reaction_integrations_slack_react_post(
            channel_id=channel_id,
            emoji_name=emoji_name,
            thread_id=thread_id,
            integration_id=integration_id,
            request_options=request_options,
        )
        return _response.data

    async def handle_get_thread_integrations_slack_thread_get(
        self,
        *,
        channel_id: str,
        thread_id: str,
        integration_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Dict[str, typing.Optional[typing.Any]]:
        """
        Parameters
        ----------
        channel_id : str

        thread_id : str

        integration_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[typing.Any]]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.handle_get_thread_integrations_slack_thread_get(
                channel_id="channel_id",
                thread_id="thread_id",
                integration_id="integration_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.handle_get_thread_integrations_slack_thread_get(
            channel_id=channel_id, thread_id=thread_id, integration_id=integration_id, request_options=request_options
        )
        return _response.data

    async def handle_get_team_info_integrations_slack_team_get(
        self, *, team_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Dict[str, typing.Optional[typing.Any]]:
        """
        Handles the request to get Slack team info

        Parameters
        ----------
        team_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[typing.Any]]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.handle_get_team_info_integrations_slack_team_get(
                team_id="team_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.handle_get_team_info_integrations_slack_team_get(
            team_id=team_id, request_options=request_options
        )
        return _response.data

    async def handle_list_channels_integrations_slack_channels_get(
        self,
        *,
        team_id: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Dict[str, typing.Optional[typing.Any]]:
        """
        Parameters
        ----------
        team_id : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[typing.Any]]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.handle_list_channels_integrations_slack_channels_get()


        asyncio.run(main())
        """
        _response = await self._raw_client.handle_list_channels_integrations_slack_channels_get(
            team_id=team_id, request_options=request_options
        )
        return _response.data

    async def handle_migrate_integrations_integrations_migrate_post(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Dict[str, typing.Optional[typing.Any]]:
        """
        Migrate integration tokens from Neon to Firestore with KMS encryption.

        This endpoint accepts a list of organization IDs and migrates their Slack and Notion tokens.
        It fetches tokens from the Neon database and stores them in Firestore,
        encrypting the tokens using KMS.

        NOTE: Not a public endpoint - used for internal database migration

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[typing.Any]]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.handle_migrate_integrations_integrations_migrate_post()


        asyncio.run(main())
        """
        _response = await self._raw_client.handle_migrate_integrations_integrations_migrate_post(
            request_options=request_options
        )
        return _response.data

    async def handle_notion_oauth_integrations_notion_oauth_post(
        self,
        *,
        access_token: str,
        metadata: typing.Dict[str, typing.Optional[typing.Any]],
        integrated_service_id: typing.Optional[str] = OMIT,
        code: typing.Optional[str] = OMIT,
        redirect_uri: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Handle Notion OAuth token upsert

        Args:
            request: The FastAPI request object
            body: The request body containing the access token and metadata

        Returns:
            Response indicating success

        Raises:
            HTTPException: If there's an error during the process

        Parameters
        ----------
        access_token : str

        metadata : typing.Dict[str, typing.Optional[typing.Any]]

        integrated_service_id : typing.Optional[str]

        code : typing.Optional[str]

        redirect_uri : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.handle_notion_oauth_integrations_notion_oauth_post(
                access_token="access_token",
                metadata={"key": "value"},
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.handle_notion_oauth_integrations_notion_oauth_post(
            access_token=access_token,
            metadata=metadata,
            integrated_service_id=integrated_service_id,
            code=code,
            redirect_uri=redirect_uri,
            request_options=request_options,
        )
        return _response.data

    async def exchange_mcp_auth_mcp_authorization_post(
        self,
        *,
        code: str,
        state: str,
        url: str,
        name: str,
        integration_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        code : str

        state : str

        url : str

        name : str

        integration_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.exchange_mcp_auth_mcp_authorization_post(
                code="code",
                state="state",
                url="url",
                name="name",
                integration_id="integration_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.exchange_mcp_auth_mcp_authorization_post(
            code=code, state=state, url=url, name=name, integration_id=integration_id, request_options=request_options
        )
        return _response.data

    async def connect_mcp_mcp_connect_post(
        self,
        *,
        url: str,
        name: str,
        integration_id: str,
        headers: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        url : str

        name : str

        integration_id : str

        headers : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.connect_mcp_mcp_connect_post(
                url="url",
                name="name",
                integration_id="integration_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.connect_mcp_mcp_connect_post(
            url=url, name=name, integration_id=integration_id, headers=headers, request_options=request_options
        )
        return _response.data

    async def delete_mcp_connection_mcp_servers_connection_id_delete(
        self, connection_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        connection_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.delete_mcp_connection_mcp_servers_connection_id_delete(
                connection_id="connection_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_mcp_connection_mcp_servers_connection_id_delete(
            connection_id, request_options=request_options
        )
        return _response.data

    async def get_mcp_servers_mcp_servers_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_mcp_servers_mcp_servers_get()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_mcp_servers_mcp_servers_get(request_options=request_options)
        return _response.data

    async def get_info_inbox_info_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_info_inbox_info_get()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_info_inbox_info_get(request_options=request_options)
        return _response.data

    async def handle_get_sessions_inbox_sessions_get(
        self, *, search: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Process an interaction request through the environment.

        Args:
            request: The FastAPI request
            session_id: The ID of the session
            interaction_request: The interaction request data

        Returns:
            Span with the results of the interaction attached to its attributes

        Parameters
        ----------
        search : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.handle_get_sessions_inbox_sessions_get(
                search="search",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.handle_get_sessions_inbox_sessions_get(
            search=search, request_options=request_options
        )
        return _response.data

    async def handle_get_notifications_inbox_notifications_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Process an interaction request through the environment.

        Args:
            request: The FastAPI request
            session_id: The ID of the session
            interaction_request: The interaction request data

        Returns:
            Span with the results of the interaction attached to its attributes

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.handle_get_notifications_inbox_notifications_get()


        asyncio.run(main())
        """
        _response = await self._raw_client.handle_get_notifications_inbox_notifications_get(
            request_options=request_options
        )
        return _response.data

    async def handle_get_session_by_id_inbox_session_id_get(
        self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        session_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.handle_get_session_by_id_inbox_session_id_get(
                session_id="session_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.handle_get_session_by_id_inbox_session_id_get(
            session_id, request_options=request_options
        )
        return _response.data

    async def handle_delete_session_inbox_session_id_delete(
        self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteResponse:
        """
        Delete an inbox session and all its associated messages.

        Args:
            request: The FastAPI request
            session_id: The ID of the session to delete

        Returns:
            DeleteResponse with deletion status

        Parameters
        ----------
        session_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.handle_delete_session_inbox_session_id_delete(
                session_id="session_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.handle_delete_session_inbox_session_id_delete(
            session_id, request_options=request_options
        )
        return _response.data

    async def handle_transcribe_inbox_session_id_transcribe_post(
        self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        session_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.handle_transcribe_inbox_session_id_transcribe_post(
                session_id="session_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.handle_transcribe_inbox_session_id_transcribe_post(
            session_id, request_options=request_options
        )
        return _response.data

    async def upload_private_files_inbox_session_id_files_post(
        self, session_id: str, *, files: typing.List[core.File], request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[FilesResponse]:
        """
        Parameters
        ----------
        session_id : str

        files : typing.List[core.File]
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[FilesResponse]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.upload_private_files_inbox_session_id_files_post(
                session_id="session_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.upload_private_files_inbox_session_id_files_post(
            session_id, files=files, request_options=request_options
        )
        return _response.data

    async def handle_get_session_messages_inbox_session_id_messages_get(
        self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Process an interaction request through the environment.

        Args:
            request: The FastAPI request
            session_id: The ID of the session
            interaction_request: The interaction request data

        Returns:
            Span with the results of the interaction attached to its attributes

        Parameters
        ----------
        session_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.handle_get_session_messages_inbox_session_id_messages_get(
                session_id="session_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.handle_get_session_messages_inbox_session_id_messages_get(
            session_id, request_options=request_options
        )
        return _response.data

    async def handle_message_inbox_session_id_messages_post(
        self,
        session_id: str,
        *,
        messages: typing.Sequence[SrcAppHttpRoutesInboxHandleMessageIncomingMessage],
        participants: typing.Sequence[SrcAppHttpRoutesInboxHandleMessageInteractionRequestParticipantsItem],
        history: typing.Optional[typing.Sequence[SrcAppHttpRoutesInboxHandleMessageIncomingMessage]] = OMIT,
        files: typing.Optional[typing.Sequence[FilesAttribute]] = OMIT,
        mentions: typing.Optional[typing.Sequence[Mention]] = OMIT,
        ephemeral_agent_revision: typing.Optional[AgentRevision] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Process an interaction request through the environment.

        Args:
            request: The FastAPI request
            session_id: The ID of the session
            interaction_request: The interaction request data

        Returns:
            Span with the results of the interaction attached to its attributes

        Parameters
        ----------
        session_id : str

        messages : typing.Sequence[SrcAppHttpRoutesInboxHandleMessageIncomingMessage]

        participants : typing.Sequence[SrcAppHttpRoutesInboxHandleMessageInteractionRequestParticipantsItem]

        history : typing.Optional[typing.Sequence[SrcAppHttpRoutesInboxHandleMessageIncomingMessage]]

        files : typing.Optional[typing.Sequence[FilesAttribute]]

        mentions : typing.Optional[typing.Sequence[Mention]]

        ephemeral_agent_revision : typing.Optional[AgentRevision]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import (
            AsyncScout,
            ScoutUser,
            SrcAppHttpRoutesInboxHandleMessageIncomingMessage,
        )

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.handle_message_inbox_session_id_messages_post(
                session_id="session_id",
                messages=[
                    SrcAppHttpRoutesInboxHandleMessageIncomingMessage(
                        content="content",
                        content_type="text/plain",
                    )
                ],
                participants=[
                    ScoutUser(
                        id="id",
                    )
                ],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.handle_message_inbox_session_id_messages_post(
            session_id,
            messages=messages,
            participants=participants,
            history=history,
            files=files,
            mentions=mentions,
            ephemeral_agent_revision=ephemeral_agent_revision,
            request_options=request_options,
        )
        return _response.data

    async def handle_post_session_participant_inbox_sessions_session_id_participants_post(
        self,
        session_id: str,
        *,
        request: typing.Sequence[Participant],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Process an interaction request through the environment.

        Args:
            request: The FastAPI request
            session_id: The ID of the session
            interaction_request: The interaction request data

        Returns:
            Span with the results of the interaction attached to its attributes

        Parameters
        ----------
        session_id : str

        request : typing.Sequence[Participant]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout, Participant

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.handle_post_session_participant_inbox_sessions_session_id_participants_post(
                session_id="session_id",
                request=[
                    Participant(
                        id="id",
                        type="scout_user",
                    )
                ],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.handle_post_session_participant_inbox_sessions_session_id_participants_post(
            session_id, request=request, request_options=request_options
        )
        return _response.data

    async def handle_cancel_session_inbox_session_id_cancel_post(
        self, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CancelResponse:
        """
        Cancel ongoing agent response for a session.

        Args:
            request: The FastAPI request
            session_id: The ID of the session to cancel

        Returns:
            CancelResponse with cancellation status

        Parameters
        ----------
        session_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CancelResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.handle_cancel_session_inbox_session_id_cancel_post(
                session_id="session_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.handle_cancel_session_inbox_session_id_cancel_post(
            session_id, request_options=request_options
        )
        return _response.data

    async def handle_rename_session_inbox_session_id_rename_post(
        self, session_id: str, *, title: str, request_options: typing.Optional[RequestOptions] = None
    ) -> RenameResponse:
        """
        Rename an inbox session by updating its title.

        Args:
            request: The FastAPI request
            session_id: The ID of the session to rename
            rename_request: The request containing the new title

        Returns:
            RenameResponse with rename status and new title

        Parameters
        ----------
        session_id : str

        title : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RenameResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.handle_rename_session_inbox_session_id_rename_post(
                session_id="session_id",
                title="title",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.handle_rename_session_inbox_session_id_rename_post(
            session_id, title=title, request_options=request_options
        )
        return _response.data

    async def execute_hook_webhooks_hook_id_get(
        self, hook_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Execute a hook trigger.

        This is the main endpoint that external services call to trigger hooks.

        Parameters
        ----------
        hook_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.execute_hook_webhooks_hook_id_get(
                hook_id="hook_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.execute_hook_webhooks_hook_id_get(hook_id, request_options=request_options)
        return _response.data

    async def execute_hook_webhooks_hook_id_post(
        self, hook_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Execute a hook trigger.

        This is the main endpoint that external services call to trigger hooks.

        Parameters
        ----------
        hook_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.execute_hook_webhooks_hook_id_post(
                hook_id="hook_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.execute_hook_webhooks_hook_id_post(hook_id, request_options=request_options)
        return _response.data

    async def delete_hook_webhooks_hook_id_delete(
        self, hook_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DeleteHookResponse:
        """
        Soft delete a hook.

        Parameters
        ----------
        hook_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DeleteHookResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.delete_hook_webhooks_hook_id_delete(
                hook_id="hook_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_hook_webhooks_hook_id_delete(hook_id, request_options=request_options)
        return _response.data

    async def update_hook_webhooks_hook_id_patch(
        self,
        hook_id: str,
        *,
        name: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        status: typing.Optional[str] = OMIT,
        target_config: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        response_mode: typing.Optional[str] = OMIT,
        allowed_methods: typing.Optional[typing.Sequence[str]] = OMIT,
        max_payload_size: typing.Optional[int] = OMIT,
        secret: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Update a hook's configuration.

        Parameters
        ----------
        hook_id : str

        name : typing.Optional[str]

        description : typing.Optional[str]

        status : typing.Optional[str]

        target_config : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        response_mode : typing.Optional[str]

        allowed_methods : typing.Optional[typing.Sequence[str]]

        max_payload_size : typing.Optional[int]

        secret : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.update_hook_webhooks_hook_id_patch(
                hook_id="hook_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update_hook_webhooks_hook_id_patch(
            hook_id,
            name=name,
            description=description,
            status=status,
            target_config=target_config,
            response_mode=response_mode,
            allowed_methods=allowed_methods,
            max_payload_size=max_payload_size,
            secret=secret,
            request_options=request_options,
        )
        return _response.data

    async def list_hooks_webhooks_get(
        self,
        *,
        target_type: typing.Optional[str] = None,
        target_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HooksListResponse:
        """
        List all hooks for the current organization.

        Parameters
        ----------
        target_type : typing.Optional[str]

        target_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HooksListResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.list_hooks_webhooks_get(
                target_type="target_type",
                target_id="target_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_hooks_webhooks_get(
            target_type=target_type, target_id=target_id, request_options=request_options
        )
        return _response.data

    async def create_hook_webhooks_post(
        self, *, request: CreateHookWebhooksPostRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> CreateHookWebhooksPostResponse:
        """
        Create a new hook for a workflow or other target.

        Parameters
        ----------
        request : CreateHookWebhooksPostRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateHookWebhooksPostResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout, WorkflowHookInput

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.create_hook_webhooks_post(
                request=WorkflowHookInput(
                    name="name",
                    target_id="target_id",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_hook_webhooks_post(request=request, request_options=request_options)
        return _response.data

    async def get_hook_webhooks_hook_id_details_get(
        self, hook_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetHookWebhooksHookIdDetailsGetResponse:
        """
        Get a hook by its ID.

        Parameters
        ----------
        hook_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetHookWebhooksHookIdDetailsGetResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_hook_webhooks_hook_id_details_get(
                hook_id="hook_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_hook_webhooks_hook_id_details_get(
            hook_id, request_options=request_options
        )
        return _response.data

    async def get_info_money_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SrcAppHttpRoutesBillingGetInfoGetInfoResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SrcAppHttpRoutesBillingGetInfoGetInfoResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_info_money_get()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_info_money_get(request_options=request_options)
        return _response.data

    async def get_billing_accounts_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SrcAppHttpRoutesBillingGetBillingResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SrcAppHttpRoutesBillingGetBillingResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_billing_accounts_get()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_billing_accounts_get(request_options=request_options)
        return _response.data

    async def get_usage_accounts_usage_get(
        self,
        *,
        start_date: typing.Optional[str] = None,
        end_date: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Result:
        """
        Parameters
        ----------
        start_date : typing.Optional[str]

        end_date : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Result
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_usage_accounts_usage_get(
                start_date="start_date",
                end_date="end_date",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_usage_accounts_usage_get(
            start_date=start_date, end_date=end_date, request_options=request_options
        )
        return _response.data

    async def get_invoices_accounts_invoices_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SrcAppHttpRoutesBillingGetInvoicesResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SrcAppHttpRoutesBillingGetInvoicesResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_invoices_accounts_invoices_get()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_invoices_accounts_invoices_get(request_options=request_options)
        return _response.data

    async def create_portal_session_accounts_portal_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SrcAppHttpRoutesBillingCreatePortalSessionResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SrcAppHttpRoutesBillingCreatePortalSessionResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.create_portal_session_accounts_portal_get()


        asyncio.run(main())
        """
        _response = await self._raw_client.create_portal_session_accounts_portal_get(request_options=request_options)
        return _response.data

    async def get_workflow_usage_accounts_usage_workflows_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Dict[str, typing.Optional[typing.Any]]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[typing.Any]]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_workflow_usage_accounts_usage_workflows_get()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_workflow_usage_accounts_usage_workflows_get(
            request_options=request_options
        )
        return _response.data

    async def get_notifications_notifications_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SrcAppHttpRoutesBillingGetNotificationsResponse:
        """
        This endpoint will pull any org facing notifications for the app to display
        Mostly billing related so far

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SrcAppHttpRoutesBillingGetNotificationsResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_notifications_notifications_get()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_notifications_notifications_get(request_options=request_options)
        return _response.data

    async def change_billing_plan_accounts_plan_put(
        self, *, name: PlanTypes, request_options: typing.Optional[RequestOptions] = None
    ) -> SrcAppHttpRoutesBillingChangeBillingPlanResponse:
        """
        Parameters
        ----------
        name : PlanTypes

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SrcAppHttpRoutesBillingChangeBillingPlanResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.change_billing_plan_accounts_plan_put(
                name="plan_1",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.change_billing_plan_accounts_plan_put(
            name=name, request_options=request_options
        )
        return _response.data

    async def stripe_webhook_hooks_stripe_post(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.stripe_webhook_hooks_stripe_post()


        asyncio.run(main())
        """
        _response = await self._raw_client.stripe_webhook_hooks_stripe_post(request_options=request_options)
        return _response.data

    async def renew_plans_crons_renew_plans_post(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SrcAppHttpRoutesBillingRenewPlansResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SrcAppHttpRoutesBillingRenewPlansResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.renew_plans_crons_renew_plans_post()


        asyncio.run(main())
        """
        _response = await self._raw_client.renew_plans_crons_renew_plans_post(request_options=request_options)
        return _response.data

    async def daily_billing_tasks_crons_free_plan_usage_post(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SrcAppHttpRoutesBillingFreePlanUsageResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SrcAppHttpRoutesBillingFreePlanUsageResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.daily_billing_tasks_crons_free_plan_usage_post()


        asyncio.run(main())
        """
        _response = await self._raw_client.daily_billing_tasks_crons_free_plan_usage_post(
            request_options=request_options
        )
        return _response.data

    async def billing_hourly_crons_billing_hourly_post(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SrcAppHttpRoutesBillingBillingHourlyResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SrcAppHttpRoutesBillingBillingHourlyResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.billing_hourly_crons_billing_hourly_post()


        asyncio.run(main())
        """
        _response = await self._raw_client.billing_hourly_crons_billing_hourly_post(request_options=request_options)
        return _response.data

    async def list_spans_traces_trace_id_spans_get(
        self, trace_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        trace_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.list_spans_traces_trace_id_spans_get(
                trace_id="trace_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_spans_traces_trace_id_spans_get(
            trace_id, request_options=request_options
        )
        return _response.data

    async def list_agent_sessions_observability_agents_agent_id_sessions_get(
        self,
        agent_id: str,
        *,
        start_date: typing.Optional[dt.datetime] = None,
        end_date: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        List agent sessions for a given agent and date range.

        Args:
            request: The FastAPI request
            agent_id: The ID of the agent
            start_date: Optional start date for filtering
            end_date: Optional end date for filtering

        Returns:
            Response with list of agent sessions

        Parameters
        ----------
        agent_id : str

        start_date : typing.Optional[dt.datetime]

        end_date : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio
        import datetime

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.list_agent_sessions_observability_agents_agent_id_sessions_get(
                agent_id="agent_id",
                start_date=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                end_date=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_agent_sessions_observability_agents_agent_id_sessions_get(
            agent_id, start_date=start_date, end_date=end_date, request_options=request_options
        )
        return _response.data

    async def list_agent_sessions_summary_observability_agents_agent_id_sessions_summary_get(
        self,
        agent_id: str,
        *,
        start_date: typing.Optional[str] = None,
        end_date: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        cursor: typing.Optional[str] = None,
        tool_filter: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        agent_id : str

        start_date : typing.Optional[str]
            Start date in ISO format

        end_date : typing.Optional[str]
            End date in ISO format

        limit : typing.Optional[int]
            Number of sessions per page

        cursor : typing.Optional[str]
            Pagination cursor

        tool_filter : typing.Optional[str]
            Filter sessions by tool name

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.list_agent_sessions_summary_observability_agents_agent_id_sessions_summary_get(
                agent_id="agent_id",
                start_date="start_date",
                end_date="end_date",
                limit=1,
                cursor="cursor",
                tool_filter="tool_filter",
            )


        asyncio.run(main())
        """
        _response = (
            await self._raw_client.list_agent_sessions_summary_observability_agents_agent_id_sessions_summary_get(
                agent_id,
                start_date=start_date,
                end_date=end_date,
                limit=limit,
                cursor=cursor,
                tool_filter=tool_filter,
                request_options=request_options,
            )
        )
        return _response.data

    async def get_session_details_observability_agents_agent_id_sessions_session_id_details_get(
        self, agent_id: str, session_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Get full session details including all traces and spans for a specific session.

        This endpoint is used when a user expands a session in the UI.

        Parameters
        ----------
        agent_id : str

        session_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_session_details_observability_agents_agent_id_sessions_session_id_details_get(
                agent_id="agent_id",
                session_id="session_id",
            )


        asyncio.run(main())
        """
        _response = (
            await self._raw_client.get_session_details_observability_agents_agent_id_sessions_session_id_details_get(
                agent_id, session_id, request_options=request_options
            )
        )
        return _response.data

    async def get_agent_session_analytics_observability_agents_agent_id_analytics_get(
        self,
        agent_id: str,
        *,
        start_date: typing.Optional[dt.datetime] = None,
        end_date: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Get session analytics data for a specific agent from spans table (hypertable).

        Parameters
        ----------
        agent_id : str

        start_date : typing.Optional[dt.datetime]

        end_date : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio
        import datetime

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_agent_session_analytics_observability_agents_agent_id_analytics_get(
                agent_id="agent_id",
                start_date=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
                end_date=datetime.datetime.fromisoformat(
                    "2024-01-15 09:30:00+00:00",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_agent_session_analytics_observability_agents_agent_id_analytics_get(
            agent_id, start_date=start_date, end_date=end_date, request_options=request_options
        )
        return _response.data

    async def get_agent_tool_usage_observability_agents_agent_id_tool_usage_get(
        self,
        agent_id: str,
        *,
        start_date: typing.Optional[str] = None,
        end_date: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Get tool usage statistics for a specific agent.

        This endpoint aggregates tool invocations from spans data to show
        which tools are most frequently used by an agent.

        Parameters
        ----------
        agent_id : str

        start_date : typing.Optional[str]
            Start date in ISO format

        end_date : typing.Optional[str]
            End date in ISO format

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_agent_tool_usage_observability_agents_agent_id_tool_usage_get(
                agent_id="agent_id",
                start_date="start_date",
                end_date="end_date",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_agent_tool_usage_observability_agents_agent_id_tool_usage_get(
            agent_id, start_date=start_date, end_date=end_date, request_options=request_options
        )
        return _response.data

    async def get_agent_distinct_tools_observability_agents_agent_id_tools_get(
        self,
        agent_id: str,
        *,
        start_date: typing.Optional[str] = None,
        end_date: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Get distinct tools used by an agent.

        This endpoint returns a clean list of all tools the agent has used
        in the specified date range, with usage counts.

        Parameters
        ----------
        agent_id : str

        start_date : typing.Optional[str]
            Start date in ISO format

        end_date : typing.Optional[str]
            End date in ISO format

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_agent_distinct_tools_observability_agents_agent_id_tools_get(
                agent_id="agent_id",
                start_date="start_date",
                end_date="end_date",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_agent_distinct_tools_observability_agents_agent_id_tools_get(
            agent_id, start_date=start_date, end_date=end_date, request_options=request_options
        )
        return _response.data

    async def get_pulse_feed_pulse_feed_get(
        self,
        *,
        user_id: typing.Optional[str] = None,
        agent_ids: typing.Optional[str] = None,
        action_types: typing.Optional[str] = None,
        start_date: typing.Optional[str] = None,
        end_date: typing.Optional[str] = None,
        limit: typing.Optional[int] = None,
        include_children: typing.Optional[bool] = None,
        min_significance: typing.Optional[float] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PulseFeedResponse:
        """
        Get pulse feed with enhanced filtering.

        Returns both new pulse events and legacy agent interactions.

        Parameters
        ----------
        user_id : typing.Optional[str]

        agent_ids : typing.Optional[str]

        action_types : typing.Optional[str]

        start_date : typing.Optional[str]

        end_date : typing.Optional[str]

        limit : typing.Optional[int]

        include_children : typing.Optional[bool]

        min_significance : typing.Optional[float]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PulseFeedResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_pulse_feed_pulse_feed_get(
                user_id="user_id",
                agent_ids="agent_ids",
                action_types="action_types",
                start_date="start_date",
                end_date="end_date",
                limit=1,
                include_children=True,
                min_significance=1.1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_pulse_feed_pulse_feed_get(
            user_id=user_id,
            agent_ids=agent_ids,
            action_types=action_types,
            start_date=start_date,
            end_date=end_date,
            limit=limit,
            include_children=include_children,
            min_significance=min_significance,
            request_options=request_options,
        )
        return _response.data

    async def create_pulse_json_pulse_post(
        self,
        *,
        description: str,
        agents: typing.Sequence[typing.Dict[str, typing.Optional[typing.Any]]],
        action: typing.Optional[str] = OMIT,
        objects: typing.Optional[typing.Sequence[typing.Dict[str, typing.Optional[typing.Any]]]] = OMIT,
        context: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        tags: typing.Optional[typing.Sequence[str]] = OMIT,
        visibility: typing.Optional[str] = OMIT,
        duration_minutes: typing.Optional[float] = OMIT,
        content: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        text: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreatePulseResponse:
        """
        Create pulse from JSON data (existing endpoint)

        Parameters
        ----------
        description : str

        agents : typing.Sequence[typing.Dict[str, typing.Optional[typing.Any]]]

        action : typing.Optional[str]

        objects : typing.Optional[typing.Sequence[typing.Dict[str, typing.Optional[typing.Any]]]]

        context : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        tags : typing.Optional[typing.Sequence[str]]

        visibility : typing.Optional[str]

        duration_minutes : typing.Optional[float]

        content : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        text : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreatePulseResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.create_pulse_json_pulse_post(
                description="description",
                agents=[{"key": "value"}],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_pulse_json_pulse_post(
            description=description,
            agents=agents,
            action=action,
            objects=objects,
            context=context,
            tags=tags,
            visibility=visibility,
            duration_minutes=duration_minutes,
            content=content,
            text=text,
            request_options=request_options,
        )
        return _response.data

    async def get_entity_activities_pulse_activities_get(
        self,
        *,
        entity_id: typing.Optional[str] = None,
        entity_type: typing.Optional[str] = None,
        involving_agent: typing.Optional[str] = None,
        on_object: typing.Optional[str] = None,
        of_type: typing.Optional[str] = None,
        with_outcome: typing.Optional[str] = None,
        since_days: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Get activities - either for a specific entity or with general filters

        Parameters
        ----------
        entity_id : typing.Optional[str]
            ID of the entity

        entity_type : typing.Optional[str]
            Type of entity (account, deal, user, etc)

        involving_agent : typing.Optional[str]

        on_object : typing.Optional[str]

        of_type : typing.Optional[str]

        with_outcome : typing.Optional[str]

        since_days : typing.Optional[int]

        limit : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_entity_activities_pulse_activities_get(
                entity_id="entity_id",
                entity_type="entity_type",
                involving_agent="involving_agent",
                on_object="on_object",
                of_type="of_type",
                with_outcome="with_outcome",
                since_days=1,
                limit=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_entity_activities_pulse_activities_get(
            entity_id=entity_id,
            entity_type=entity_type,
            involving_agent=involving_agent,
            on_object=on_object,
            of_type=of_type,
            with_outcome=with_outcome,
            since_days=since_days,
            limit=limit,
            request_options=request_options,
        )
        return _response.data

    async def store_create_pulse_store_create_post(
        self,
        *,
        type: str,
        data: typing.Dict[str, typing.Optional[typing.Any]],
        tags: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StoreResponse:
        """
        Create a new entity.

        Example:
            POST /pulse/store/create
            {
                "type": "todo",
                "data": {
                    "title": "Buy milk",
                    "completed": false
                }
            }

        Parameters
        ----------
        type : str
            Entity type (e.g., 'todo', 'note', 'task')

        data : typing.Dict[str, typing.Optional[typing.Any]]
            Entity data

        tags : typing.Optional[typing.Sequence[str]]
            Optional tags

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StoreResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.store_create_pulse_store_create_post(
                type="type",
                data={"key": "value"},
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.store_create_pulse_store_create_post(
            type=type, data=data, tags=tags, request_options=request_options
        )
        return _response.data

    async def store_update_pulse_store_update_post(
        self,
        *,
        id: str,
        updates: typing.Dict[str, typing.Optional[typing.Any]],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StoreResponse:
        """
        Update an entity (partial updates).

        Example:
            POST /pulse/store/update
            {
                "id": "todo_abc123",
                "updates": {
                    "completed": true,
                    "completed_at": "2024-01-01T12:00:00Z"
                }
            }

        Parameters
        ----------
        id : str
            Entity ID

        updates : typing.Dict[str, typing.Optional[typing.Any]]
            Partial updates to apply

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StoreResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.store_update_pulse_store_update_post(
                id="id",
                updates={"key": "value"},
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.store_update_pulse_store_update_post(
            id=id, updates=updates, request_options=request_options
        )
        return _response.data

    async def store_get_tags_pulse_store_tags_get(
        self,
        *,
        type: typing.Optional[str] = None,
        prefix: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TagsResponse:
        """
        Get all unique tags across entities.

        Example:
            GET /pulse/store/tags?type=file&prefix=folder:

        Parameters
        ----------
        type : typing.Optional[str]

        prefix : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TagsResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.store_get_tags_pulse_store_tags_get(
                type="type",
                prefix="prefix",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.store_get_tags_pulse_store_tags_get(
            type=type, prefix=prefix, request_options=request_options
        )
        return _response.data

    async def store_update_tags_pulse_store_tags_update_post(
        self,
        *,
        id: str,
        add_tags: typing.Optional[typing.Sequence[str]] = OMIT,
        remove_tags: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StoreResponse:
        """
        Add or remove tags from an entity.

        Example:
            POST /pulse/store/tags/update
            {
                "id": "file-uuid",
                "add_tags": ["folder:marketing", "folder:campaigns"],
                "remove_tags": ["folder:archive"]
            }

        Parameters
        ----------
        id : str
            Entity ID

        add_tags : typing.Optional[typing.Sequence[str]]
            Tags to add

        remove_tags : typing.Optional[typing.Sequence[str]]
            Tags to remove

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StoreResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.store_update_tags_pulse_store_tags_update_post(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.store_update_tags_pulse_store_tags_update_post(
            id=id, add_tags=add_tags, remove_tags=remove_tags, request_options=request_options
        )
        return _response.data

    async def store_get_pulse_store_entity_id_get(
        self, entity_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> StoreResponse:
        """
        Get a single entity.

        GET /pulse/store/{entity_id}

        Parameters
        ----------
        entity_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StoreResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.store_get_pulse_store_entity_id_get(
                entity_id="entity_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.store_get_pulse_store_entity_id_get(
            entity_id, request_options=request_options
        )
        return _response.data

    async def store_delete_pulse_store_entity_id_delete(
        self,
        entity_id: str,
        *,
        soft: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StoreResponse:
        """
        Delete an entity.

        DELETE /pulse/store/{entity_id}?soft=true

        Parameters
        ----------
        entity_id : str

        soft : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StoreResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.store_delete_pulse_store_entity_id_delete(
                entity_id="entity_id",
                soft=True,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.store_delete_pulse_store_entity_id_delete(
            entity_id, soft=soft, request_options=request_options
        )
        return _response.data

    async def store_query_pulse_store_query_post(
        self,
        *,
        type: typing.Optional[str] = OMIT,
        filter: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        tags: typing.Optional[typing.Sequence[str]] = OMIT,
        limit: typing.Optional[int] = OMIT,
        include_deleted: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> StoreResponse:
        """
        Query entities with filters.

        Example:
            POST /pulse/store/query
            {
                "type": "file",
                "tags": ["folder:marketing"],
                "filter": {
                    "completed": false
                },
                "limit": 50
            }

        Parameters
        ----------
        type : typing.Optional[str]
            Filter by entity type

        filter : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Filter by data fields

        tags : typing.Optional[typing.Sequence[str]]
            Filter by tags (must have ALL specified tags)

        limit : typing.Optional[int]
            Max results

        include_deleted : typing.Optional[bool]
            Include soft-deleted entities

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StoreResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.store_query_pulse_store_query_post()


        asyncio.run(main())
        """
        _response = await self._raw_client.store_query_pulse_store_query_post(
            type=type,
            filter=filter,
            tags=tags,
            limit=limit,
            include_deleted=include_deleted,
            request_options=request_options,
        )
        return _response.data

    async def store_query_fluent_pulse_store_query_fluent_post(
        self,
        *,
        select: str,
        where: typing.Optional[typing.Sequence[typing.Dict[str, typing.Optional[typing.Any]]]] = OMIT,
        with_: typing.Optional[typing.Sequence[FluentQueryRequestWithItem]] = OMIT,
        order_by: typing.Optional[typing.Sequence[typing.Dict[str, str]]] = OMIT,
        limit: typing.Optional[int] = OMIT,
        offset: typing.Optional[int] = OMIT,
        cursor: typing.Optional[str] = OMIT,
        count: typing.Optional[bool] = OMIT,
        group_by: typing.Optional[str] = OMIT,
        aggregations: typing.Optional[typing.Dict[str, typing.Dict[str, str]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Dict[str, typing.Optional[typing.Any]]:
        """
        Powerful fluent query API with relationships and advanced filtering.

        Example:
            POST /pulse/store/query/fluent
            {
                "select": "deal",
                "where": [
                    {"field": "stage", "operator": "in", "value": ["negotiation", "proposal"]},
                    {"field": "value", "operator": ">=", "value": 50000}
                ],
                "with": ["account", "contact"],
                "orderBy": [{"field": "value", "direction": "desc"}],
                "limit": 50
            }

        Returns:
            {
                "ok": true,
                "data": [entity, ...],
                "total": 123,
                "includes": {
                    "account": {entity_id: account_entity},
                    "contact": {entity_id: contact_entity}
                }
            }

        Parameters
        ----------
        select : str
            Entity type to select

        where : typing.Optional[typing.Sequence[typing.Dict[str, typing.Optional[typing.Any]]]]
            WHERE conditions: [{field, operator, value}, ...]

        with_ : typing.Optional[typing.Sequence[FluentQueryRequestWithItem]]
            Relations to include (auto-JOIN)

        order_by : typing.Optional[typing.Sequence[typing.Dict[str, str]]]
            Order by: [{field, direction}, ...]

        limit : typing.Optional[int]
            Max results

        offset : typing.Optional[int]
            Offset for pagination

        cursor : typing.Optional[str]
            Cursor for pagination

        count : typing.Optional[bool]
            Include total count

        group_by : typing.Optional[str]
            Group by field

        aggregations : typing.Optional[typing.Dict[str, typing.Dict[str, str]]]
            Aggregations: {alias: {function, field}}

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Dict[str, typing.Optional[typing.Any]]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.store_query_fluent_pulse_store_query_fluent_post(
                select="select",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.store_query_fluent_pulse_store_query_fluent_post(
            select=select,
            where=where,
            with_=with_,
            order_by=order_by,
            limit=limit,
            offset=offset,
            cursor=cursor,
            count=count,
            group_by=group_by,
            aggregations=aggregations,
            request_options=request_options,
        )
        return _response.data

    async def store_batch_create_pulse_store_batch_create_post(
        self, *, entities: typing.Sequence[CreateEntityRequest], request_options: typing.Optional[RequestOptions] = None
    ) -> StoreResponse:
        """
        Create multiple entities.

        Example:
            POST /pulse/store/batch/create
            {
                "entities": [
                    {"type": "todo", "data": {"title": "Task 1"}},
                    {"type": "todo", "data": {"title": "Task 2"}}
                ]
            }

        Parameters
        ----------
        entities : typing.Sequence[CreateEntityRequest]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StoreResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout, CreateEntityRequest

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.store_batch_create_pulse_store_batch_create_post(
                entities=[
                    CreateEntityRequest(
                        type="type",
                        data={"key": "value"},
                    )
                ],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.store_batch_create_pulse_store_batch_create_post(
            entities=entities, request_options=request_options
        )
        return _response.data

    async def list_entities_pulse_entities_get(
        self,
        *,
        limit: typing.Optional[int] = None,
        entity_type: typing.Optional[str] = None,
        current_state: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        List all entities extracted from activities.

        Returns entities with their mention counts and metadata.
        Used by the frontend ChannelEntitiesPanel.

        Parameters
        ----------
        limit : typing.Optional[int]

        entity_type : typing.Optional[str]
            Filter by entity type

        current_state : typing.Optional[bool]
            Return only current state via quantum collapse

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.list_entities_pulse_entities_get(
                limit=1,
                entity_type="entity_type",
                current_state=True,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_entities_pulse_entities_get(
            limit=limit, entity_type=entity_type, current_state=current_state, request_options=request_options
        )
        return _response.data

    async def query_entities_pulse_entities_query_post(
        self,
        *,
        entity_type: typing.Optional[str] = OMIT,
        activity_filters: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        tags: typing.Optional[typing.Sequence[str]] = OMIT,
        outcomes: typing.Optional[typing.Sequence[str]] = OMIT,
        actions: typing.Optional[typing.Sequence[str]] = OMIT,
        time: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        kinds: typing.Optional[typing.Sequence[str]] = OMIT,
        roles: typing.Optional[typing.Sequence[str]] = OMIT,
        current_state: typing.Optional[bool] = OMIT,
        include_stats: typing.Optional[bool] = OMIT,
        group_by: typing.Optional[str] = OMIT,
        limit: typing.Optional[int] = OMIT,
        min_activities: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Query entities (agents or objects) across activities

        Examples:

        # Find all sales agents
        {
            "entity_type": "agent",
            "tags": ["sales"],
            "include_stats": true
        }

        # Find documents involved in approved deals
        {
            "entity_type": "object",
            "kinds": ["document", "contract"],
            "outcomes": ["approved"],
            "include_stats": true
        }

        # Find active users in last 7 days
        {
            "entity_type": "agent",
            "kinds": ["user"],
            "time": {"last": "7d"},
            "min_activities": 5,
            "include_stats": true
        }

        # Find cross-functional agents (sales + engineering)
        {
            "entity_type": "agent",
            "tags": ["sales", "engineering"],
            "group_by": "kind"
        }

        Parameters
        ----------
        entity_type : typing.Optional[str]
            'agent' or 'object'

        activity_filters : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Filter activities that entities appear in

        tags : typing.Optional[typing.Sequence[str]]
            Activities must have these tags

        outcomes : typing.Optional[typing.Sequence[str]]
            Activities must have these outcomes

        actions : typing.Optional[typing.Sequence[str]]
            Activities must have these actions

        time : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Time range for activities

        kinds : typing.Optional[typing.Sequence[str]]
            Entity kinds to include (user, team, document, etc)

        roles : typing.Optional[typing.Sequence[str]]
            Entity roles to include

        current_state : typing.Optional[bool]
            Return only current state via quantum collapse

        include_stats : typing.Optional[bool]
            Include activity statistics for each entity

        group_by : typing.Optional[str]
            Group entities by field (kind, role)

        limit : typing.Optional[int]

        min_activities : typing.Optional[int]
            Minimum activities for entity to be included

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.query_entities_pulse_entities_query_post()


        asyncio.run(main())
        """
        _response = await self._raw_client.query_entities_pulse_entities_query_post(
            entity_type=entity_type,
            activity_filters=activity_filters,
            tags=tags,
            outcomes=outcomes,
            actions=actions,
            time=time,
            kinds=kinds,
            roles=roles,
            current_state=current_state,
            include_stats=include_stats,
            group_by=group_by,
            limit=limit,
            min_activities=min_activities,
            request_options=request_options,
        )
        return _response.data

    async def get_entity_network_pulse_entities_entity_id_network_get(
        self,
        entity_id: str,
        *,
        depth: typing.Optional[int] = None,
        min_interactions: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Get the collaboration network around an entity

        Returns entities connected to the target entity through shared activities

        Parameters
        ----------
        entity_id : str

        depth : typing.Optional[int]
            Network depth

        min_interactions : typing.Optional[int]
            Minimum interactions to include connection

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_entity_network_pulse_entities_entity_id_network_get(
                entity_id="entity_id",
                depth=1,
                min_interactions=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_entity_network_pulse_entities_entity_id_network_get(
            entity_id, depth=depth, min_interactions=min_interactions, request_options=request_options
        )
        return _response.data

    async def get_entity_network_pg_pulse_entities_entity_id_network_pg_get(
        self,
        entity_id: str,
        *,
        depth: typing.Optional[int] = None,
        min_interactions: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Get the collaboration network around an entity using PostgreSQL.

        Returns entities connected to the target entity through shared activities.
        This is optimized for PostgreSQL and uses efficient SQL queries instead of
        multiple API calls.

        Parameters
        ----------
        entity_id : str

        depth : typing.Optional[int]
            Network depth

        min_interactions : typing.Optional[int]
            Minimum interactions to include connection

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_entity_network_pg_pulse_entities_entity_id_network_pg_get(
                entity_id="entity_id",
                depth=1,
                min_interactions=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_entity_network_pg_pulse_entities_entity_id_network_pg_get(
            entity_id, depth=depth, min_interactions=min_interactions, request_options=request_options
        )
        return _response.data

    async def get_entity_details_pulse_entities_entity_type_entity_id_get(
        self,
        entity_type: str,
        entity_id: str,
        *,
        include_activities: typing.Optional[bool] = None,
        time_range: typing.Optional[str] = None,
        current_state: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Get detailed information about a specific entity

        When current_state=true, uses quantum collapse to return only the latest state.
        Otherwise includes all activities they've been involved in and collaboration patterns.

        Parameters
        ----------
        entity_type : str

        entity_id : str

        include_activities : typing.Optional[bool]

        time_range : typing.Optional[str]
            Time range like '7d', '30d'

        current_state : typing.Optional[bool]
            Return only current state via quantum collapse

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_entity_details_pulse_entities_entity_type_entity_id_get(
                entity_type="entity_type",
                entity_id="entity_id",
                include_activities=True,
                time_range="time_range",
                current_state=True,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_entity_details_pulse_entities_entity_type_entity_id_get(
            entity_type,
            entity_id,
            include_activities=include_activities,
            time_range=time_range,
            current_state=current_state,
            request_options=request_options,
        )
        return _response.data

    async def get_schemas_pulse_schemas_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SchemasResponse:
        """
        Get all schemas for dynamic form generation.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SchemasResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_schemas_pulse_schemas_get()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_schemas_pulse_schemas_get(request_options=request_options)
        return _response.data

    async def search_activities_pulse_search_post(
        self,
        *,
        query: typing.Optional[str] = OMIT,
        search_type: typing.Optional[SearchRequestSearchType] = OMIT,
        filters: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        limit: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Hybrid search for activities using PostgreSQL full-text and vector search.

        Thin handler - delegates to PulseSearch domain API.

        Parameters
        ----------
        query : typing.Optional[str]
            Search query text

        search_type : typing.Optional[SearchRequestSearchType]
            Type of search

        filters : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Additional filters to apply

        limit : typing.Optional[int]
            Maximum results to return

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.search_activities_pulse_search_post()


        asyncio.run(main())
        """
        _response = await self._raw_client.search_activities_pulse_search_post(
            query=query, search_type=search_type, filters=filters, limit=limit, request_options=request_options
        )
        return _response.data

    async def search_entities_pulse_search_entities_post(
        self,
        *,
        query: str,
        entity_ids: typing.Optional[typing.Sequence[str]] = OMIT,
        entity_types: typing.Optional[typing.Sequence[str]] = OMIT,
        mode: typing.Optional[EntitySearchRequestMode] = OMIT,
        return_format: typing.Optional[EntitySearchRequestReturnFormat] = OMIT,
        limit: typing.Optional[int] = OMIT,
        similarity_threshold: typing.Optional[float] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Search for entities with document content using hybrid search.

        Thin handler - delegates to PulseSearch domain API.

        Parameters
        ----------
        query : str
            Search query text

        entity_ids : typing.Optional[typing.Sequence[str]]
            Specific entity IDs to search within

        entity_types : typing.Optional[typing.Sequence[str]]
            Entity types to search (file, note, etc)

        mode : typing.Optional[EntitySearchRequestMode]
            Search mode

        return_format : typing.Optional[EntitySearchRequestReturnFormat]
            What to return - chunks, entity info, or full text

        limit : typing.Optional[int]
            Max results

        similarity_threshold : typing.Optional[float]
            Minimum similarity score

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.search_entities_pulse_search_entities_post(
                query="query",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.search_entities_pulse_search_entities_post(
            query=query,
            entity_ids=entity_ids,
            entity_types=entity_types,
            mode=mode,
            return_format=return_format,
            limit=limit,
            similarity_threshold=similarity_threshold,
            request_options=request_options,
        )
        return _response.data

    async def update_search_indexes_pulse_search_update_indexes_post(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Update search indexes for existing activities.

        Thin handler - delegates to PulseSearch domain API.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.update_search_indexes_pulse_search_update_indexes_post()


        asyncio.run(main())
        """
        _response = await self._raw_client.update_search_indexes_pulse_search_update_indexes_post(
            request_options=request_options
        )
        return _response.data

    async def get_distinct_values_pulse_search_distinct_field_get(
        self, field: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Get distinct values for a specific field to help with query building.

        Thin handler - delegates to PulseSearch domain API.

        Parameters
        ----------
        field : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_distinct_values_pulse_search_distinct_field_get(
                field="field",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_distinct_values_pulse_search_distinct_field_get(
            field, request_options=request_options
        )
        return _response.data

    async def query_builder_pulse_query_post(
        self,
        *,
        limit: typing.Optional[int] = OMIT,
        offset: typing.Optional[int] = OMIT,
        text_query: typing.Optional[str] = OMIT,
        time_range_start: typing.Optional[dt.datetime] = OMIT,
        time_range_end: typing.Optional[dt.datetime] = OMIT,
        last_hours: typing.Optional[int] = OMIT,
        last_days: typing.Optional[int] = OMIT,
        agent_types: typing.Optional[typing.Sequence[str]] = OMIT,
        agent_ids: typing.Optional[typing.Sequence[str]] = OMIT,
        object_types: typing.Optional[typing.Sequence[str]] = OMIT,
        object_ids: typing.Optional[typing.Sequence[str]] = OMIT,
        action_types: typing.Optional[typing.Sequence[str]] = OMIT,
        action_statuses: typing.Optional[typing.Sequence[str]] = OMIT,
        specific_actions: typing.Optional[typing.Sequence[str]] = OMIT,
        tags: typing.Optional[typing.Sequence[str]] = OMIT,
        exclude_tags: typing.Optional[typing.Sequence[str]] = OMIT,
        tag_mode: typing.Optional[QueryBuilderRequestTagMode] = OMIT,
        min_duration_minutes: typing.Optional[float] = OMIT,
        max_duration_minutes: typing.Optional[float] = OMIT,
        customer_id: typing.Optional[str] = OMIT,
        team_name: typing.Optional[str] = OMIT,
        deal_stages: typing.Optional[typing.Sequence[str]] = OMIT,
        revenue_impact: typing.Optional[bool] = OMIT,
        churn_risk: typing.Optional[bool] = OMIT,
        escalation_level: typing.Optional[str] = OMIT,
        trace_id: typing.Optional[str] = OMIT,
        triggered_by: typing.Optional[str] = OMIT,
        sort_by: typing.Optional[QueryBuilderRequestSortBy] = OMIT,
        sort_direction: typing.Optional[QueryBuilderRequestSortDirection] = OMIT,
        count_only: typing.Optional[bool] = OMIT,
        explain: typing.Optional[bool] = OMIT,
        aggregate: typing.Optional[bool] = OMIT,
        group_by: typing.Optional[typing.Sequence[QueryBuilderRequestGroupByItem]] = OMIT,
        group_by_tag_prefix: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Execute a declarative query using the powerful PulseQuery builder

        This endpoint provides a more structured and powerful alternative to text-based search,
        allowing complex filtering, aggregation, and business logic queries.

        Examples:

        # Find all activities by specific agents in last 7 days
        {
            "agent_types": ["user"],
            "last_days": 7,
            "sort_by": "time"
        }

        # Customer journey analysis
        {
            "customer_id": "customer_123",
            "last_days": 30,
            "sort_by": "time",
            "sort_direction": "asc"
        }

        # Revenue impact events with duration filters
        {
            "revenue_impact": true,
            "min_duration_minutes": 5,
            "tags": ["sales", "deal"],
            "tag_mode": "all"
        }

        # Aggregated metrics by team
        {
            "last_days": 14,
            "aggregate": true,
            "group_by": ["agent_type"],
            "team_name": "engineering"
        }

        Parameters
        ----------
        limit : typing.Optional[int]
            Maximum results to return

        offset : typing.Optional[int]
            Offset for pagination

        text_query : typing.Optional[str]
            Text to search in descriptions

        time_range_start : typing.Optional[dt.datetime]
            Start time for filtering

        time_range_end : typing.Optional[dt.datetime]
            End time for filtering

        last_hours : typing.Optional[int]
            Filter to last N hours

        last_days : typing.Optional[int]
            Filter to last N days

        agent_types : typing.Optional[typing.Sequence[str]]
            Filter by agent types

        agent_ids : typing.Optional[typing.Sequence[str]]
            Filter by specific agent IDs

        object_types : typing.Optional[typing.Sequence[str]]
            Filter by object types

        object_ids : typing.Optional[typing.Sequence[str]]
            Filter by specific object IDs

        action_types : typing.Optional[typing.Sequence[str]]
            Filter by action types

        action_statuses : typing.Optional[typing.Sequence[str]]
            Filter by action statuses

        specific_actions : typing.Optional[typing.Sequence[str]]
            Filter by specific action names

        tags : typing.Optional[typing.Sequence[str]]
            Tags to include

        exclude_tags : typing.Optional[typing.Sequence[str]]
            Tags to exclude

        tag_mode : typing.Optional[QueryBuilderRequestTagMode]
            Whether to match any or all tags

        min_duration_minutes : typing.Optional[float]
            Minimum duration in minutes

        max_duration_minutes : typing.Optional[float]
            Maximum duration in minutes

        customer_id : typing.Optional[str]
            Filter by customer ID

        team_name : typing.Optional[str]
            Filter by team

        deal_stages : typing.Optional[typing.Sequence[str]]
            Filter by deal stages

        revenue_impact : typing.Optional[bool]
            Filter for revenue impact events

        churn_risk : typing.Optional[bool]
            Filter for churn risk events

        escalation_level : typing.Optional[str]
            Filter by escalation level

        trace_id : typing.Optional[str]
            Filter by trace ID

        triggered_by : typing.Optional[str]
            Filter by triggering event

        sort_by : typing.Optional[QueryBuilderRequestSortBy]
            Sort field

        sort_direction : typing.Optional[QueryBuilderRequestSortDirection]
            Sort direction

        count_only : typing.Optional[bool]
            Return only count, not full results

        explain : typing.Optional[bool]
            Include query explanation

        aggregate : typing.Optional[bool]
            Return aggregated results

        group_by : typing.Optional[typing.Sequence[QueryBuilderRequestGroupByItem]]
            Group by fields for aggregation

        group_by_tag_prefix : typing.Optional[str]
            Group by tag prefix (e.g., 'customer:')

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.query_builder_pulse_query_post()


        asyncio.run(main())
        """
        _response = await self._raw_client.query_builder_pulse_query_post(
            limit=limit,
            offset=offset,
            text_query=text_query,
            time_range_start=time_range_start,
            time_range_end=time_range_end,
            last_hours=last_hours,
            last_days=last_days,
            agent_types=agent_types,
            agent_ids=agent_ids,
            object_types=object_types,
            object_ids=object_ids,
            action_types=action_types,
            action_statuses=action_statuses,
            specific_actions=specific_actions,
            tags=tags,
            exclude_tags=exclude_tags,
            tag_mode=tag_mode,
            min_duration_minutes=min_duration_minutes,
            max_duration_minutes=max_duration_minutes,
            customer_id=customer_id,
            team_name=team_name,
            deal_stages=deal_stages,
            revenue_impact=revenue_impact,
            churn_risk=churn_risk,
            escalation_level=escalation_level,
            trace_id=trace_id,
            triggered_by=triggered_by,
            sort_by=sort_by,
            sort_direction=sort_direction,
            count_only=count_only,
            explain=explain,
            aggregate=aggregate,
            group_by=group_by,
            group_by_tag_prefix=group_by_tag_prefix,
            request_options=request_options,
        )
        return _response.data

    async def query_builder_schema_pulse_query_schema_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Get the schema for the query builder, showing all available filters and options

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.query_builder_schema_pulse_query_schema_get()


        asyncio.run(main())
        """
        _response = await self._raw_client.query_builder_schema_pulse_query_schema_get(request_options=request_options)
        return _response.data

    async def upload_pulse_files_stream_pulse_files_stream_post(
        self, *, files: typing.List[core.File], request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Upload files to Pulse with activity tracking and optional RAG processing.
        Returns a streaming response with progress updates.

        Thin handler - delegates to PulseFiles domain API.

        Parameters
        ----------
        files : typing.List[core.File]
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.upload_pulse_files_stream_pulse_files_stream_post()


        asyncio.run(main())
        """
        _response = await self._raw_client.upload_pulse_files_stream_pulse_files_stream_post(
            files=files, request_options=request_options
        )
        return _response.data

    async def get_pulse_files_pulse_files_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Get list of files for an organization.

        Thin handler - delegates to PulseFiles domain API.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_pulse_files_pulse_files_get()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_pulse_files_pulse_files_get(request_options=request_options)
        return _response.data

    async def download_pulse_file_pulse_files_file_name_get(
        self, file_name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Get a signed URL for downloading a file.

        Thin handler - delegates to PulseFiles domain API.

        Parameters
        ----------
        file_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.download_pulse_file_pulse_files_file_name_get(
                file_name="file_name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.download_pulse_file_pulse_files_file_name_get(
            file_name, request_options=request_options
        )
        return _response.data

    async def delete_pulse_file_pulse_files_file_name_delete(
        self, file_name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Delete a file and its associated chunks.

        Thin handler - delegates to PulseFiles domain API.

        Parameters
        ----------
        file_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.delete_pulse_file_pulse_files_file_name_delete(
                file_name="file_name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_pulse_file_pulse_files_file_name_delete(
            file_name, request_options=request_options
        )
        return _response.data

    async def get_file_chunks_pulse_files_file_name_chunks_get(
        self, file_name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Get RAG document chunks for a file.

        Thin handler - delegates to PulseFiles domain API.

        Parameters
        ----------
        file_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_file_chunks_pulse_files_file_name_chunks_get(
                file_name="file_name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_file_chunks_pulse_files_file_name_chunks_get(
            file_name, request_options=request_options
        )
        return _response.data

    async def generate_ai_suggestion_pulse_security_questionnaire_ai_suggest_post(
        self,
        *,
        question_id: str,
        question_text: str,
        category: str,
        questionnaire_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Generate AI suggestion for a security question using RAG.

        Thin handler - delegates to PulseQuestionnaire domain API.

        Parameters
        ----------
        question_id : str

        question_text : str

        category : str

        questionnaire_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.generate_ai_suggestion_pulse_security_questionnaire_ai_suggest_post(
                question_id="question_id",
                question_text="question_text",
                category="category",
                questionnaire_id="questionnaire_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.generate_ai_suggestion_pulse_security_questionnaire_ai_suggest_post(
            question_id=question_id,
            question_text=question_text,
            category=category,
            questionnaire_id=questionnaire_id,
            request_options=request_options,
        )
        return _response.data

    async def generate_batch_suggestions_pulse_security_questionnaire_batch_suggest_post(
        self,
        *,
        question_ids: typing.Sequence[str],
        questionnaire_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Generate AI suggestions for multiple questions in batch.

        Thin handler - delegates to PulseQuestionnaire domain API.

        Parameters
        ----------
        question_ids : typing.Sequence[str]

        questionnaire_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.generate_batch_suggestions_pulse_security_questionnaire_batch_suggest_post(
                question_ids=["question_ids"],
                questionnaire_id="questionnaire_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.generate_batch_suggestions_pulse_security_questionnaire_batch_suggest_post(
            question_ids=question_ids, questionnaire_id=questionnaire_id, request_options=request_options
        )
        return _response.data

    async def update_questionnaire_files_pulse_security_questionnaire_questionnaire_id_files_put(
        self,
        questionnaire_id: str,
        *,
        file_ids: typing.Sequence[str],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Update the selected files for a questionnaire.

        Thin handler - delegates to PulseQuestionnaire domain API.

        Parameters
        ----------
        questionnaire_id : str

        file_ids : typing.Sequence[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.update_questionnaire_files_pulse_security_questionnaire_questionnaire_id_files_put(
                questionnaire_id="questionnaire_id",
                file_ids=["file_ids"],
            )


        asyncio.run(main())
        """
        _response = (
            await self._raw_client.update_questionnaire_files_pulse_security_questionnaire_questionnaire_id_files_put(
                questionnaire_id, file_ids=file_ids, request_options=request_options
            )
        )
        return _response.data

    async def get_questionnaire_with_questions_pulse_security_questionnaire_questionnaire_id_get(
        self, questionnaire_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Get questionnaire with all its questions loaded.

        Thin handler - delegates to PulseQuestionnaire domain API.

        Parameters
        ----------
        questionnaire_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_questionnaire_with_questions_pulse_security_questionnaire_questionnaire_id_get(
                questionnaire_id="questionnaire_id",
            )


        asyncio.run(main())
        """
        _response = (
            await self._raw_client.get_questionnaire_with_questions_pulse_security_questionnaire_questionnaire_id_get(
                questionnaire_id, request_options=request_options
            )
        )
        return _response.data

    async def seed_agents_onboarding_seed_agents_post(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Manually seed default agent personas for a new organization.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.seed_agents_onboarding_seed_agents_post()


        asyncio.run(main())
        """
        _response = await self._raw_client.seed_agents_onboarding_seed_agents_post(request_options=request_options)
        return _response.data

    async def find_me_me_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> SrcAppHttpRoutesOnboardingHandleGetMeResponse:
        """
        Get the current authenticated user's information.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SrcAppHttpRoutesOnboardingHandleGetMeResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.find_me_me_get()


        asyncio.run(main())
        """
        _response = await self._raw_client.find_me_me_get(request_options=request_options)
        return _response.data

    async def update_me_me_put(
        self,
        *,
        favorites: typing.Optional[typing.Sequence[FavoriteRef]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SrcAppHttpRoutesOnboardingHandleUpdateMeResponse:
        """
        Update the current authenticated user's information.

        Parameters
        ----------
        favorites : typing.Optional[typing.Sequence[FavoriteRef]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SrcAppHttpRoutesOnboardingHandleUpdateMeResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.update_me_me_put()


        asyncio.run(main())
        """
        _response = await self._raw_client.update_me_me_put(favorites=favorites, request_options=request_options)
        return _response.data

    async def find_all_scout_hooks_hooks_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ScoutHooksResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ScoutHooksResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.find_all_scout_hooks_hooks_get()


        asyncio.run(main())
        """
        _response = await self._raw_client.find_all_scout_hooks_hooks_get(request_options=request_options)
        return _response.data

    async def create_scout_hook_hooks_post(
        self,
        *,
        hook_config: typing.Optional[ScoutHookConfigHttp] = OMIT,
        name: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        triggering_events: typing.Optional[typing.Sequence[ScoutHookUpdateTriggeringEventsItem]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ScoutHookResponse:
        """
        Parameters
        ----------
        hook_config : typing.Optional[ScoutHookConfigHttp]

        name : typing.Optional[str]

        description : typing.Optional[str]

        metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        triggering_events : typing.Optional[typing.Sequence[ScoutHookUpdateTriggeringEventsItem]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ScoutHookResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.create_scout_hook_hooks_post()


        asyncio.run(main())
        """
        _response = await self._raw_client.create_scout_hook_hooks_post(
            hook_config=hook_config,
            name=name,
            description=description,
            metadata=metadata,
            triggering_events=triggering_events,
            request_options=request_options,
        )
        return _response.data

    async def update_scout_hook_hooks_hook_id_put(
        self,
        hook_id: str,
        *,
        hook_config: typing.Optional[ScoutHookConfigHttp] = OMIT,
        name: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        triggering_events: typing.Optional[typing.Sequence[ScoutHookUpdateTriggeringEventsItem]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ScoutHookResponse:
        """
        Parameters
        ----------
        hook_id : str

        hook_config : typing.Optional[ScoutHookConfigHttp]

        name : typing.Optional[str]

        description : typing.Optional[str]

        metadata : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        triggering_events : typing.Optional[typing.Sequence[ScoutHookUpdateTriggeringEventsItem]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ScoutHookResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.update_scout_hook_hooks_hook_id_put(
                hook_id="hook_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update_scout_hook_hooks_hook_id_put(
            hook_id,
            hook_config=hook_config,
            name=name,
            description=description,
            metadata=metadata,
            triggering_events=triggering_events,
            request_options=request_options,
        )
        return _response.data

    async def remove_scout_hook_hooks_hook_id_delete(
        self, hook_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        hook_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.remove_scout_hook_hooks_hook_id_delete(
                hook_id="hook_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.remove_scout_hook_hooks_hook_id_delete(
            hook_id, request_options=request_options
        )
        return _response.data

    async def rotate_api_keys_organization_rotate_keys_post(
        self,
        *,
        confirm: typing.Optional[bool] = OMIT,
        grace_period_hours: typing.Optional[float] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Rotate API keys for the current organization.

        Delegates to ProfileManager for the actual business logic.

        Parameters
        ----------
        confirm : typing.Optional[bool]

        grace_period_hours : typing.Optional[float]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.rotate_api_keys_organization_rotate_keys_post()


        asyncio.run(main())
        """
        _response = await self._raw_client.rotate_api_keys_organization_rotate_keys_post(
            confirm=confirm, grace_period_hours=grace_period_hours, request_options=request_options
        )
        return _response.data

    async def list_tags_tags_get(self, *, request_options: typing.Optional[RequestOptions] = None) -> ListTagsResponse:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListTagsResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.list_tags_tags_get()


        asyncio.run(main())
        """
        _response = await self._raw_client.list_tags_tags_get(request_options=request_options)
        return _response.data

    async def create_tag_tags_post(
        self,
        *,
        name: str,
        description: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateTagResponse:
        """
        Parameters
        ----------
        name : str

        description : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateTagResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.create_tag_tags_post(
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_tag_tags_post(
            name=name, description=description, request_options=request_options
        )
        return _response.data

    async def get_tag_tags_tag_id_get(
        self, tag_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Tag:
        """
        Parameters
        ----------
        tag_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Tag
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_tag_tags_tag_id_get(
                tag_id="tag_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_tag_tags_tag_id_get(tag_id, request_options=request_options)
        return _response.data

    async def update_tag_tags_tag_id_put(
        self,
        tag_id: str,
        *,
        name: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        active: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateTagResponse:
        """
        Parameters
        ----------
        tag_id : str

        name : typing.Optional[str]

        description : typing.Optional[str]

        active : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateTagResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.update_tag_tags_tag_id_put(
                tag_id="tag_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update_tag_tags_tag_id_put(
            tag_id, name=name, description=description, active=active, request_options=request_options
        )
        return _response.data

    async def list_tools_tools_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ListToolsResponse:
        """
        Get available tools for the organization with full input schemas.

        This endpoint delegates to the Tool domain API which provides:
        - Tool authorization checking
        - Schema retrieval from all sources
        - Comprehensive tool information

        Args:
            request: The FastAPI request

        Returns:
            ListToolsResponse with detailed tool information

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListToolsResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.list_tools_tools_get()


        asyncio.run(main())
        """
        _response = await self._raw_client.list_tools_tools_get(request_options=request_options)
        return _response.data

    async def get_tool_tools_tool_name_get(
        self, tool_name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ToolDetails:
        """
        Get detailed information about a specific tool.

        This endpoint returns comprehensive information about a single tool including:
        - Tool metadata (name, description, icon)
        - Input schema
        - Labels and categorization

        Args:
            request: The FastAPI request
            tool_name: The name of the tool to retrieve

        Returns:
            ToolDetails with comprehensive tool information

        Raises:
            HTTPException: 404 if tool not found, 403 if not available

        Parameters
        ----------
        tool_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ToolDetails
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_tool_tools_tool_name_get(
                tool_name="tool_name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_tool_tools_tool_name_get(tool_name, request_options=request_options)
        return _response.data

    async def execute_tool_tools_tool_name_execute_post(
        self,
        tool_name: str,
        *,
        input_data: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ExecuteToolResponse:
        """
        Execute a specific tool.

        This endpoint delegates to the Tool domain API which handles:
        - Tool authorization
        - Tool discovery from all sources
        - Context injection
        - Tool execution

        Args:
            request: The FastAPI request
            tool_name: The name of the tool to execute (from path parameter)
            body: The tool execution request body

        Returns:
            ExecuteToolResponse with execution result or error

        Parameters
        ----------
        tool_name : str

        input_data : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Input data for the tool execution

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ExecuteToolResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.execute_tool_tools_tool_name_execute_post(
                tool_name="tool_name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.execute_tool_tools_tool_name_execute_post(
            tool_name, input_data=input_data, request_options=request_options
        )
        return _response.data

    async def interact_handler_world_agent_id_session_id_interact_post(
        self,
        agent_id: str,
        session_id: str,
        *,
        messages: typing.Sequence[SrcAppHttpRoutesWorldInteractIncomingMessage],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        agent_id : str

        session_id : str

        messages : typing.Sequence[SrcAppHttpRoutesWorldInteractIncomingMessage]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout, SrcAppHttpRoutesWorldInteractIncomingMessage

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.interact_handler_world_agent_id_session_id_interact_post(
                agent_id="agent_id",
                session_id="session_id",
                messages=[
                    SrcAppHttpRoutesWorldInteractIncomingMessage(
                        content="content",
                    )
                ],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.interact_handler_world_agent_id_session_id_interact_post(
            agent_id, session_id, messages=messages, request_options=request_options
        )
        return _response.data

    async def interact_handler_world_agent_id_interact_post(
        self,
        agent_id: str,
        *,
        messages: typing.Sequence[SrcAppHttpRoutesWorldInteractIncomingMessage],
        session_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        agent_id : str

        messages : typing.Sequence[SrcAppHttpRoutesWorldInteractIncomingMessage]

        session_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout, SrcAppHttpRoutesWorldInteractIncomingMessage

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.interact_handler_world_agent_id_interact_post(
                agent_id="agent_id",
                session_id="session_id",
                messages=[
                    SrcAppHttpRoutesWorldInteractIncomingMessage(
                        content="content",
                    )
                ],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.interact_handler_world_agent_id_interact_post(
            agent_id, messages=messages, session_id=session_id, request_options=request_options
        )
        return _response.data

    async def list_agents_agents_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.list_agents_agents_get()


        asyncio.run(main())
        """
        _response = await self._raw_client.list_agents_agents_get(request_options=request_options)
        return _response.data

    async def upsert_agent_agents_post(
        self,
        *,
        agent: str,
        revision: str,
        agent_image: core.File,
        agent_id: typing.Optional[str] = OMIT,
        activate: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        agent : str

        revision : str

        agent_image : core.File
            See core.File for more documentation

        agent_id : typing.Optional[str]

        activate : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.upsert_agent_agents_post(
                agent="agent",
                revision="revision",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.upsert_agent_agents_post(
            agent=agent,
            revision=revision,
            agent_image=agent_image,
            agent_id=agent_id,
            activate=activate,
            request_options=request_options,
        )
        return _response.data

    async def get_active_agent_agents_agent_id_active_get(
        self, agent_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Retrieve an agent and its active revision by agent_id.
        Verifies that the agent belongs to the actor's organization.

        Parameters
        ----------
        agent_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_active_agent_agents_agent_id_active_get(
                agent_id="agent_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_active_agent_agents_agent_id_active_get(
            agent_id, request_options=request_options
        )
        return _response.data

    async def get_tools_agents_tools_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ToolsResponse:
        """
        Get available tools for the organization.

        Args:
            request: The FastAPI request

        Returns:
            Span with the list of available tools attached to its attributes

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ToolsResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_tools_agents_tools_get()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_tools_agents_tools_get(request_options=request_options)
        return _response.data

    async def delete_agent_agents_agent_id_delete(
        self, agent_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        agent_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.delete_agent_agents_agent_id_delete(
                agent_id="agent_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_agent_agents_agent_id_delete(
            agent_id, request_options=request_options
        )
        return _response.data

    async def expire_blobs_expire_blobs_post(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.expire_blobs_expire_blobs_post()


        asyncio.run(main())
        """
        _response = await self._raw_client.expire_blobs_expire_blobs_post(request_options=request_options)
        return _response.data

    async def get_drive_drive_get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_drive_drive_get()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_drive_drive_get(request_options=request_options)
        return _response.data

    async def get_drive_file_drive_files_file_name_get(
        self, file_name: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        file_name : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.get_drive_file_drive_files_file_name_get(
                file_name="file_name",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_drive_file_drive_files_file_name_get(
            file_name, request_options=request_options
        )
        return _response.data

    async def upload_files_to_drive_drive_files_post(
        self, *, files: typing.List[core.File], request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        files : typing.List[core.File]
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.upload_files_to_drive_drive_files_post()


        asyncio.run(main())
        """
        _response = await self._raw_client.upload_files_to_drive_drive_files_post(
            files=files, request_options=request_options
        )
        return _response.data

    async def create_drive_crawl_drive_crawls_post(
        self,
        *,
        source_sync_settings: SrcAppHttpRoutesDriveCreateDriveCrawlPayloadSourceSyncSettings,
        url: str,
        schedule: typing.Optional[Schedule] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Since we do not have domain apis for collections we have to import
        the route functions and pass the request through.

        We could get the org key and move this logic to the drive domain api
        but we would then need to get the org secret key to make http requests
        since importing into the drive domain api would cause circular dependencies.
        Which then forces us to use network requests via scout sdk or httpx.

        This is the lesser evil I.M.O.

        Parameters
        ----------
        source_sync_settings : SrcAppHttpRoutesDriveCreateDriveCrawlPayloadSourceSyncSettings

        url : str

        schedule : typing.Optional[Schedule]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout, SourceSyncGoogleDriveSettings

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.create_drive_crawl_drive_crawls_post(
                source_sync_settings=SourceSyncGoogleDriveSettings(),
                url="url",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_drive_crawl_drive_crawls_post(
            source_sync_settings=source_sync_settings, url=url, schedule=schedule, request_options=request_options
        )
        return _response.data

    async def grant_access_drive_grant_post(
        self,
        *,
        agent_ids: typing.Sequence[str],
        resources: typing.Sequence[Resource],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        agent_ids : typing.Sequence[str]

        resources : typing.Sequence[Resource]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout, Resource

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.grant_access_drive_grant_post(
                agent_ids=["agent_ids"],
                resources=[
                    Resource(
                        resource_id="resource_id",
                        resource_type="tables",
                    )
                ],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.grant_access_drive_grant_post(
            agent_ids=agent_ids, resources=resources, request_options=request_options
        )
        return _response.data

    async def revoke_access_drive_revoke_post(
        self,
        *,
        agent_ids: typing.Sequence[str],
        resource_ids: typing.Sequence[str],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        agent_ids : typing.Sequence[str]

        resource_ids : typing.Sequence[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from scoutos import AsyncScout

        client = AsyncScout(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.revoke_access_drive_revoke_post(
                agent_ids=["agent_ids"],
                resource_ids=["resource_ids"],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.revoke_access_drive_revoke_post(
            agent_ids=agent_ids, resource_ids=resource_ids, request_options=request_options
        )
        return _response.data

    @property
    def workflows(self):
        if self._workflows is None:
            from .workflows.client import AsyncWorkflowsClient  # noqa: E402

            self._workflows = AsyncWorkflowsClient(client_wrapper=self._client_wrapper)
        return self._workflows

    @property
    def environments(self):
        if self._environments is None:
            from .environments.client import AsyncEnvironmentsClient  # noqa: E402

            self._environments = AsyncEnvironmentsClient(client_wrapper=self._client_wrapper)
        return self._environments

    @property
    def revisions(self):
        if self._revisions is None:
            from .revisions.client import AsyncRevisionsClient  # noqa: E402

            self._revisions = AsyncRevisionsClient(client_wrapper=self._client_wrapper)
        return self._revisions

    @property
    def usage(self):
        if self._usage is None:
            from .usage.client import AsyncUsageClient  # noqa: E402

            self._usage = AsyncUsageClient(client_wrapper=self._client_wrapper)
        return self._usage

    @property
    def workflow_logs(self):
        if self._workflow_logs is None:
            from .workflow_logs.client import AsyncWorkflowLogsClient  # noqa: E402

            self._workflow_logs = AsyncWorkflowLogsClient(client_wrapper=self._client_wrapper)
        return self._workflow_logs

    @property
    def copilots(self):
        if self._copilots is None:
            from .copilots.client import AsyncCopilotsClient  # noqa: E402

            self._copilots = AsyncCopilotsClient(client_wrapper=self._client_wrapper)
        return self._copilots

    @property
    def triggers(self):
        if self._triggers is None:
            from .triggers.client import AsyncTriggersClient  # noqa: E402

            self._triggers = AsyncTriggersClient(client_wrapper=self._client_wrapper)
        return self._triggers

    @property
    def integrations(self):
        if self._integrations is None:
            from .integrations.client import AsyncIntegrationsClient  # noqa: E402

            self._integrations = AsyncIntegrationsClient(client_wrapper=self._client_wrapper)
        return self._integrations

    @property
    def organizations(self):
        if self._organizations is None:
            from .organizations.client import AsyncOrganizationsClient  # noqa: E402

            self._organizations = AsyncOrganizationsClient(client_wrapper=self._client_wrapper)
        return self._organizations

    @property
    def collections(self):
        if self._collections is None:
            from .collections.client import AsyncCollectionsClient  # noqa: E402

            self._collections = AsyncCollectionsClient(client_wrapper=self._client_wrapper)
        return self._collections

    @property
    def tables(self):
        if self._tables is None:
            from .tables.client import AsyncTablesClient  # noqa: E402

            self._tables = AsyncTablesClient(client_wrapper=self._client_wrapper)
        return self._tables

    @property
    def documents(self):
        if self._documents is None:
            from .documents.client import AsyncDocumentsClient  # noqa: E402

            self._documents = AsyncDocumentsClient(client_wrapper=self._client_wrapper)
        return self._documents

    @property
    def sources(self):
        if self._sources is None:
            from .sources.client import AsyncSourcesClient  # noqa: E402

            self._sources = AsyncSourcesClient(client_wrapper=self._client_wrapper)
        return self._sources

    @property
    def syncs(self):
        if self._syncs is None:
            from .syncs.client import AsyncSyncsClient  # noqa: E402

            self._syncs = AsyncSyncsClient(client_wrapper=self._client_wrapper)
        return self._syncs


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: ScoutEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
